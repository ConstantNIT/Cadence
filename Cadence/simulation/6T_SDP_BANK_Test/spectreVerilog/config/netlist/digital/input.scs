
`timescale 1ps / 1ps

module test;


wire  ReadAck, WriteAck;


wire [4:0]  WA_Ack;
wire [4:0]  RA_Ack;
wire [7:0]  WD_Ack;
wire [31:0]  ReadData;

reg [31:0]  WriteData;
reg [19:0]  R_Address;
reg [7:0]  RD_Ack;
reg [1:0]  RRW;
reg [1:0]  WRW;
reg [19:0]  W_Address;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_94 top(RA_Ack, ReadAck, ReadData, WA_Ack, WD_Ack, WriteAck, 
     RD_Ack, RRW, R_Address, WRW, W_Address, WriteData); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 
// Vermix stimulus file.
// Default verimix stimulus. 

integer rLog;
integer wLog;
integer seed;
integer start;
integer i;
reg[19:0] lastWriteAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;

initial
begin 

   seed = 5;
   start = 0;
   rStart = $time;
   rDelay = $time;
   wStart = $time;
   wDelay = $time;

   rLog=$fopen("/tmp2/SDP_BANK_RLog.csv");
   //$fdisplay(rLog, "R_Address[19:0], ReadData[31:0], total_time(ps), read_delay(ps)");

   wLog=$fopen("/tmp2/SDP_BANK_WLog.csv"); 
   //$fdisplay(wLog, "W_Address[19:0], WriteData[31:0], total_time(ps), write_delay(ps)");

   RRW[1:0]        = 2'b00;
   RD_Ack[7:0]     = 8'h00;
   R_Address[19:0] = 20'h00000;

   WRW[1:0]        = 2'b00;
   W_Address[19:0] = 20'h00000;
   WriteData[31:0] = 32'h00000000;

   #1000;

   start           = 1;
   WRW[1:0]        = 2'b01;
   W_Address[19:0] = 20'h11111;
   WriteData[31:0] = 32'h11111111;
   wStart 	   = $time;

end 


always @(posedge WriteAck) begin
   if (start==1) begin
   	  wDelay = $time - wStart;
   	  $fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WriteData[31:0], $time, wDelay);
          lastWriteAddr[19:0] <= W_Address[19:0];
   	  WriteData[31:0] = 32'h00000000;
          W_Address[19:0] = 20'h00000;
          WRW[1:0]        = 2'b00;
          wStart   = $time;
          wait(~WriteAck);
   	  wDelay = $time - wStart;
   	  $fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WriteData[31:0], $time, wDelay);

   	  RD_Ack[7:0]     = 8'hFF;
          RRW[1:0]        = 2'b10;
          R_Address[19:0] = lastWriteAddr[19:0];	   
	  rStart          = $time;
   end
 end


always @(posedge ReadAck) begin
   if (start==1) begin
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h %h %t %t", R_Address[19:0], ReadData[31:0], $time, rDelay);   	   
   	   RD_Ack[7:0]     = 8'h00;
   	   RRW[1:0]        = 2'b00;
   	   R_Address[19:0] = 20'h00000;
	   rStart          = $time;
           wait(~ReadAck);
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h %h %t %t", R_Address[19:0], ReadData[31:0], $time, rDelay);   

           WriteData[31:0]   = 32'h44444444;
   	   W_Address[19:0]   = 20'h22222;
           WRW[1:0]  	     = 2'b01;  
           wStart            = $time;
   end
end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /~WA_Ack<0>
	$vmx_define_import( test.top.mixedNet99998, "99998"); // /~RA_Ack<2>
	$vmx_define_export( test.top.cdsbus8[12], "99997"); // /~W_Address<12>
	$vmx_define_export( test.top.cdsbus4[16], "99996"); // /~WriteData<16>
	$vmx_define_export( test.top.cdsbus8[13], "99995"); // /~W_Address<13>
	$vmx_define_import( test.top.mixedNet99994, "99994"); // /~RA_Ack<1>
	$vmx_define_export( test.top.cdsbus4[10], "99993"); // /~WriteData<10>
	$vmx_define_export( test.top.cdsbus4[0], "99992"); // /~WriteData<0>
	$vmx_define_import( test.top.mixedNet99991, "99991"); // /~ReadAck
	$vmx_define_import( test.top.mixedNet99990, "99990"); // /~ReadData<16>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /~ReadData<19>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /~ReadData<31>
	$vmx_define_export( test.top.cdsbus8[6], "99987"); // /~W_Address<6>
	$vmx_define_export( test.top.cdsbus5[5], "99986"); // /~RD_Ack<5>
	$vmx_define_export( test.top.cdsbus8[5], "99985"); // /~W_Address<5>
	$vmx_define_import( test.top.mixedNet99984, "99984"); // /~RA_Ack<4>
	$vmx_define_import( test.top.mixedNet99983, "99983"); // /~RA_Ack<0>
	$vmx_define_export( test.top.cdsbus8[10], "99982"); // /~W_Address<10>
	$vmx_define_import( test.top.mixedNet99981, "99981"); // /~ReadData<30>
	$vmx_define_export( test.top.cdsbus8[3], "99980"); // /~W_Address<3>
	$vmx_define_import( test.top.mixedNet99979, "99979"); // /~ReadData<28>
	$vmx_define_export( test.top.cdsbus5[0], "99978"); // /~RD_Ack<0>
	$vmx_define_export( test.top.cdsbus8[2], "99977"); // /~W_Address<2>
	$vmx_define_export( test.top.cdsbus4[29], "99976"); // /~WriteData<29>
	$vmx_define_export( test.top.cdsbus6[10], "99975"); // /~R_Address<10>
	$vmx_define_import( test.top.mixedNet99974, "99974"); // /~ReadData<20>
	$vmx_define_export( test.top.cdsbus5[3], "99973"); // /~RD_Ack<3>
	$vmx_define_import( test.top.mixedNet99972, "99972"); // /~WA_Ack<3>
	$vmx_define_import( test.top.mixedNet99971, "99971"); // /~ReadData<17>
	$vmx_define_import( test.top.mixedNet99970, "99970"); // /~ReadData<21>
	$vmx_define_export( test.top.cdsbus5[4], "99969"); // /~RD_Ack<4>
	$vmx_define_export( test.top.cdsbus8[0], "99968"); // /~W_Address<0>
	$vmx_define_export( test.top.cdsbus8[16], "99967"); // /~W_Address<16>
	$vmx_define_import( test.top.mixedNet99966, "99966"); // /~ReadData<11>
	$vmx_define_export( test.top.cdsbus8[18], "99965"); // /~W_Address<18>
	$vmx_define_export( test.top.cdsbus8[4], "99964"); // /~W_Address<4>
	$vmx_define_export( test.top.cdsbus8[15], "99963"); // /~W_Address<15>
	$vmx_define_import( test.top.mixedNet99962, "99962"); // /~WA_Ack<2>
	$vmx_define_export( test.top.cdsbus6[14], "99961"); // /~R_Address<14>
	$vmx_define_export( test.top.cdsbus6[13], "99960"); // /~R_Address<13>
	$vmx_define_export( test.top.cdsbus6[15], "99959"); // /~R_Address<15>
	$vmx_define_import( test.top.mixedNet99958, "99958"); // /~ReadData<10>
	$vmx_define_import( test.top.mixedNet99957, "99957"); // /~ReadData<9>
	$vmx_define_export( test.top.cdsbus4[31], "99956"); // /~WriteData<31>
	$vmx_define_export( test.top.cdsbus7[0], "99955"); // /~WRW<0>
	$vmx_define_export( test.top.cdsbus4[28], "99954"); // /~WriteData<28>
	$vmx_define_export( test.top.cdsbus4[27], "99953"); // /~WriteData<27>
	$vmx_define_export( test.top.cdsbus4[26], "99952"); // /~WriteData<26>
	$vmx_define_export( test.top.cdsbus6[12], "99951"); // /~R_Address<12>
	$vmx_define_export( test.top.cdsbus4[25], "99950"); // /~WriteData<25>
	$vmx_define_export( test.top.cdsbus4[12], "99949"); // /~WriteData<12>
	$vmx_define_export( test.top.cdsbus4[18], "99948"); // /~WriteData<18>
	$vmx_define_export( test.top.cdsbus4[22], "99947"); // /~WriteData<22>
	$vmx_define_export( test.top.cdsbus4[21], "99946"); // /~WriteData<21>
	$vmx_define_export( test.top.cdsbus4[20], "99945"); // /~WriteData<20>
	$vmx_define_export( test.top.cdsbus4[14], "99944"); // /~WriteData<14>
	$vmx_define_export( test.top.cdsbus6[11], "99943"); // /~R_Address<11>
	$vmx_define_import( test.top.mixedNet99942, "99942"); // /~ReadData<14>
	$vmx_define_export( test.top.cdsbus4[30], "99941"); // /~WriteData<30>
	$vmx_define_export( test.top.cdsbus6[7], "99940"); // /~R_Address<7>
	$vmx_define_export( test.top.cdsbus6[5], "99939"); // /~R_Address<5>
	$vmx_define_export( test.top.cdsbus4[17], "99938"); // /~WriteData<17>
	$vmx_define_export( test.top.cdsbus6[4], "99937"); // /~R_Address<4>
	$vmx_define_export( test.top.cdsbus6[8], "99936"); // /~R_Address<8>
	$vmx_define_import( test.top.mixedNet99935, "99935"); // /~ReadData<27>
	$vmx_define_import( test.top.mixedNet99934, "99934"); // /~ReadData<8>
	$vmx_define_import( test.top.mixedNet99933, "99933"); // /~WA_Ack<1>
	$vmx_define_export( test.top.cdsbus6[9], "99932"); // /~R_Address<9>
	$vmx_define_import( test.top.mixedNet99931, "99931"); // /~ReadData<7>
	$vmx_define_import( test.top.mixedNet99930, "99930"); // /~ReadData<29>
	$vmx_define_export( test.top.cdsbus5[6], "99929"); // /~RD_Ack<6>
	$vmx_define_import( test.top.mixedNet99928, "99928"); // /~ReadData<4>
	$vmx_define_export( test.top.cdsbus9[1], "99927"); // /~RRW<1>
	$vmx_define_export( test.top.cdsbus4[23], "99926"); // /~WriteData<23>
	$vmx_define_export( test.top.cdsbus4[8], "99925"); // /~WriteData<8>
	$vmx_define_export( test.top.cdsbus4[19], "99924"); // /~WriteData<19>
	$vmx_define_export( test.top.cdsbus4[13], "99923"); // /~WriteData<13>
	$vmx_define_export( test.top.cdsbus4[11], "99922"); // /~WriteData<11>
	$vmx_define_export( test.top.cdsbus4[7], "99921"); // /~WriteData<7>
	$vmx_define_export( test.top.cdsbus6[1], "99920"); // /~R_Address<1>
	$vmx_define_import( test.top.mixedNet99919, "99919"); // /~ReadData<13>
	$vmx_define_export( test.top.cdsbus9[0], "99918"); // /~RRW<0>
	$vmx_define_import( test.top.mixedNet99917, "99917"); // /~ReadData<22>
	$vmx_define_export( test.top.cdsbus4[4], "99916"); // /~WriteData<4>
	$vmx_define_import( test.top.mixedNet99915, "99915"); // /~ReadData<26>
	$vmx_define_import( test.top.mixedNet99914, "99914"); // /~ReadData<5>
	$vmx_define_export( test.top.cdsbus4[3], "99913"); // /~WriteData<3>
	$vmx_define_import( test.top.mixedNet99912, "99912"); // /~ReadData<6>
	$vmx_define_export( test.top.cdsbus6[16], "99911"); // /~R_Address<16>
	$vmx_define_import( test.top.mixedNet99910, "99910"); // /~WD_Ack<1>
	$vmx_define_export( test.top.cdsbus6[19], "99909"); // /~R_Address<19>
	$vmx_define_export( test.top.cdsbus6[18], "99908"); // /~R_Address<18>
	$vmx_define_import( test.top.mixedNet99907, "99907"); // /~ReadData<25>
	$vmx_define_import( test.top.mixedNet99906, "99906"); // /~WD_Ack<0>
	$vmx_define_export( test.top.cdsbus4[24], "99905"); // /~WriteData<24>
	$vmx_define_import( test.top.mixedNet99904, "99904"); // /~ReadData<24>
	$vmx_define_import( test.top.mixedNet99903, "99903"); // /~ReadData<18>
	$vmx_define_import( test.top.mixedNet99902, "99902"); // /~WA_Ack<4>
	$vmx_define_import( test.top.mixedNet99901, "99901"); // /~ReadData<23>
	$vmx_define_export( test.top.cdsbus6[17], "99900"); // /~R_Address<17>
	$vmx_define_import( test.top.mixedNet99899, "99899"); // /~WD_Ack<7>
	$vmx_define_export( test.top.cdsbus5[7], "99898"); // /~RD_Ack<7>
	$vmx_define_import( test.top.mixedNet99897, "99897"); // /~ReadData<3>
	$vmx_define_import( test.top.mixedNet99896, "99896"); // /~RA_Ack<3>
	$vmx_define_export( test.top.cdsbus8[1], "99895"); // /~W_Address<1>
	$vmx_define_export( test.top.cdsbus4[15], "99894"); // /~WriteData<15>
	$vmx_define_export( test.top.cdsbus6[0], "99893"); // /~R_Address<0>
	$vmx_define_export( test.top.cdsbus8[19], "99892"); // /~W_Address<19>
	$vmx_define_export( test.top.cdsbus4[6], "99891"); // /~WriteData<6>
	$vmx_define_export( test.top.cdsbus6[6], "99890"); // /~R_Address<6>
	$vmx_define_export( test.top.cdsbus6[3], "99889"); // /~R_Address<3>
	$vmx_define_import( test.top.mixedNet99888, "99888"); // /~ReadData<2>
	$vmx_define_import( test.top.mixedNet99887, "99887"); // /~ReadData<1>
	$vmx_define_import( test.top.mixedNet99886, "99886"); // /~ReadData<0>
	$vmx_define_import( test.top.mixedNet99885, "99885"); // /~WD_Ack<6>
	$vmx_define_export( test.top.cdsbus4[9], "99884"); // /~WriteData<9>
	$vmx_define_export( test.top.cdsbus6[2], "99883"); // /~R_Address<2>
	$vmx_define_export( test.top.cdsbus8[11], "99882"); // /~W_Address<11>
	$vmx_define_export( test.top.cdsbus8[8], "99881"); // /~W_Address<8>
	$vmx_define_export( test.top.cdsbus8[7], "99880"); // /~W_Address<7>
	$vmx_define_import( test.top.mixedNet99879, "99879"); // /~WD_Ack<5>
	$vmx_define_export( test.top.cdsbus5[2], "99878"); // /~RD_Ack<2>
	$vmx_define_export( test.top.cdsbus4[5], "99877"); // /~WriteData<5>
	$vmx_define_import( test.top.mixedNet99876, "99876"); // /~WriteAck
	$vmx_define_export( test.top.cdsbus5[1], "99875"); // /~RD_Ack<1>
	$vmx_define_export( test.top.cdsbus4[2], "99874"); // /~WriteData<2>
	$vmx_define_import( test.top.mixedNet99873, "99873"); // /~ReadData<15>
	$vmx_define_import( test.top.mixedNet99872, "99872"); // /~ReadData<12>
	$vmx_define_export( test.top.cdsbus8[17], "99871"); // /~W_Address<17>
	$vmx_define_import( test.top.mixedNet99870, "99870"); // /~WD_Ack<4>
	$vmx_define_import( test.top.mixedNet99869, "99869"); // /~WD_Ack<3>
	$vmx_define_export( test.top.cdsbus7[1], "99868"); // /~WRW<1>
	$vmx_define_import( test.top.mixedNet99867, "99867"); // /~WD_Ack<2>
	$vmx_define_export( test.top.cdsbus4[1], "99866"); // /~WriteData<1>
	$vmx_define_export( test.top.cdsbus8[14], "99865"); // /~W_Address<14>
	$vmx_define_export( test.top.cdsbus8[9], "99864"); // /~W_Address<9>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.WriteData[21], test.top.RA_Ack[2], test.top.W_Address[15], test.top.RA_Ack[0], test.top.W_Address[16], test.top.W_Address[17], test.top.ReadData[23], test.top.WriteData[30], test.top.WD_Ack[3], test.top.WD_Ack[5], test.top.WD_Ack[4], test.top.RD_Ack[2], test.top.WA_Ack[2], test.top.WriteData[14], test.top.W_Address[12], test.top.W_Address[3], test.top.RD_Ack[5], test.top.R_Address[17], test.top.R_Address[16], test.top.ReadData[17], test.top.ReadData[16], test.top.WriteData[1], test.top.WriteData[0], test.top.WriteData[23], test.top.ReadData[29], test.top.WriteData[10], test.top.WriteData[12], test.top.WriteData[26], test.top.WriteData[29], test.top.RD_Ack[4], test.top.WA_Ack[0], test.top.ReadData[12], test.top.W_Address[2], test.top.WA_Ack[3], test.top.WriteData[22], test.top.R_Address[18], test.top.WA_Ack[1], test.top.ReadData[1], test.top.RD_Ack[3], test.top.WriteData[11], test.top.W_Address[19], test.top.W_Address[13], test.top.W_Address[9], test.top.ReadAck, test.top.ReadData[20], 
test.top.WriteData[9], test.top.ReadData[4], test.top.WriteData[18], test.top.ReadData[22], test.top.WriteData[8], test.top.RD_Ack[7], test.top.RD_Ack[6], test.top.WriteData[31], test.top.ReadData[14], test.top.ReadData[3], test.top.ReadData[2], test.top.WD_Ack[1], test.top.ReadData[18], test.top.RRW[1], test.top.WriteData[5], test.top.W_Address[18], test.top.ReadData[24], test.top.ReadData[21], test.top.WD_Ack[7], test.top.WRW[1], test.top.WD_Ack[6], test.top.ReadData[28], test.top.WA_Ack[4], test.top.WriteAck, test.top.ReadData[0], test.top.ReadData[30], test.top.WD_Ack[0], test.top.ReadData[5], test.top.ReadData[31], test.top.WriteData[25], test.top.WriteData[17], test.top.ReadData[8], test.top.WriteData[13], test.top.WriteData[2], test.top.R_Address[14], test.top.ReadData[19], test.top.R_Address[13], test.top.ReadData[25], test.top.RA_Ack[4], test.top.R_Address[12], test.top.R_Address[11], test.top.RA_Ack[1], test.top.R_Address[10], test.top.WriteData[24], test.top.R_Address[9], test.top.WriteData[7], 
test.top.R_Address[8], test.top.WD_Ack[2], test.top.R_Address[7], test.top.R_Address[6], test.top.ReadData[15], test.top.ReadData[11], test.top.R_Address[5], test.top.WRW[0], test.top.ReadData[27], test.top.RA_Ack[3], test.top.WriteData[3], test.top.ReadData[26], test.top.R_Address[4], test.top.R_Address[3], test.top.R_Address[2], test.top.R_Address[1], test.top.R_Address[0], test.top.RD_Ack[1], test.top.WriteData[20], test.top.WriteData[4], test.top.W_Address[8], test.top.ReadData[10], test.top.ReadData[7], test.top.WriteData[27], test.top.W_Address[11], test.top.W_Address[10], test.top.W_Address[7], test.top.W_Address[5], test.top.W_Address[6], test.top.W_Address[4], test.top.R_Address[19], test.top.W_Address[1], test.top.WriteData[16], test.top.W_Address[14], test.top.W_Address[0], test.top.WriteData[15], test.top.WriteData[28], test.top.ReadData[13], test.top.R_Address[15], test.top.WriteData[6], test.top.ReadData[9], test.top.WriteData[19], test.top.RRW[0], test.top.ReadData[6], test.top.RD_Ack[0], 
test.top.WriteData[31:0], test.top.W_Address[19:0], test.top.WD_Ack[7:0], test.top.RD_Ack[7:0], test.top.WA_Ack[4:0], test.top.WRW[1:0], test.top.ReadData[31:0], test.top.RA_Ack[4:0], test.top.R_Address[19:0], test.top.RRW[1:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_SDP_BANK_Test, View - schematic
// LAST TIME SAVED: Mar 10 20:09:50 2015
// NETLIST TIME: Apr  2 18:11:48 2015
`timescale 1ps / 1ps 

module cdsModule_94 ( RA_Ack, ReadAck, ReadData, WA_Ack, WD_Ack,
     WriteAck, RD_Ack, RRW, R_Address, WRW, W_Address, WriteData );

output  ReadAck, WriteAck;


output [4:0]  WA_Ack;
output [4:0]  RA_Ack;
output [7:0]  WD_Ack;
output [31:0]  ReadData;

input [31:0]  WriteData;
input [19:0]  R_Address;
input [7:0]  RD_Ack;
input [1:0]  RRW;
input [1:0]  WRW;
input [19:0]  W_Address;

// Buses in the design

wire  [31:0]  ReadDataT;

wire  [4:0]  cdsbus0;

wire  [7:0]  cdsbus1;

wire  [4:0]  cdsbus2;

wire  [19:0]  R_AddressT;

wire  [4:0]  WA_AckT;

wire  [31:0]  cdsbus3;

wire  [31:0]  cdsbus4;

wire  [7:0]  cdsbus5;

wire  [4:0]  RA_AckT;

wire  [19:0]  cdsbus6;

wire  [1:0]  RRWT;

wire  [19:0]  W_AddressT;

wire  [1:0]  WRWT;

wire  [7:0]  RD_AckT;

wire  [31:0]  WriteDataT;

wire  [1:0]  cdsbus7;

wire  [19:0]  cdsbus8;

wire  [1:0]  cdsbus9;

wire  [7:0]  WD_AckT;

// begin interface element definitions

wire cdsNet0;
wire cdsNet1;
reg mixedNet99999;
reg mixedNet99998;
reg mixedNet99994;
reg mixedNet99991;
reg mixedNet99990;
reg mixedNet99989;
reg mixedNet99988;
reg mixedNet99984;
reg mixedNet99983;
reg mixedNet99981;
reg mixedNet99979;
reg mixedNet99974;
reg mixedNet99972;
reg mixedNet99971;
reg mixedNet99970;
reg mixedNet99966;
reg mixedNet99962;
reg mixedNet99958;
reg mixedNet99957;
reg mixedNet99942;
reg mixedNet99935;
reg mixedNet99934;
reg mixedNet99933;
reg mixedNet99931;
reg mixedNet99930;
reg mixedNet99928;
reg mixedNet99919;
reg mixedNet99917;
reg mixedNet99915;
reg mixedNet99914;
reg mixedNet99912;
reg mixedNet99910;
reg mixedNet99907;
reg mixedNet99906;
reg mixedNet99904;
reg mixedNet99903;
reg mixedNet99902;
reg mixedNet99901;
reg mixedNet99899;
reg mixedNet99897;
reg mixedNet99896;
reg mixedNet99888;
reg mixedNet99887;
reg mixedNet99886;
reg mixedNet99885;
reg mixedNet99879;
reg mixedNet99876;
reg mixedNet99873;
reg mixedNet99872;
reg mixedNet99870;
reg mixedNet99869;
reg mixedNet99867;
assign cdsbus2[0] = mixedNet99999;
assign cdsbus0[2] = mixedNet99998;
assign cdsbus0[1] = mixedNet99994;
assign cdsNet0 = mixedNet99991;
assign cdsbus3[16] = mixedNet99990;
assign cdsbus3[19] = mixedNet99989;
assign cdsbus3[31] = mixedNet99988;
assign cdsbus0[4] = mixedNet99984;
assign cdsbus0[0] = mixedNet99983;
assign cdsbus3[30] = mixedNet99981;
assign cdsbus3[28] = mixedNet99979;
assign cdsbus3[20] = mixedNet99974;
assign cdsbus2[3] = mixedNet99972;
assign cdsbus3[17] = mixedNet99971;
assign cdsbus3[21] = mixedNet99970;
assign cdsbus3[11] = mixedNet99966;
assign cdsbus2[2] = mixedNet99962;
assign cdsbus3[10] = mixedNet99958;
assign cdsbus3[9] = mixedNet99957;
assign cdsbus3[14] = mixedNet99942;
assign cdsbus3[27] = mixedNet99935;
assign cdsbus3[8] = mixedNet99934;
assign cdsbus2[1] = mixedNet99933;
assign cdsbus3[7] = mixedNet99931;
assign cdsbus3[29] = mixedNet99930;
assign cdsbus3[4] = mixedNet99928;
assign cdsbus3[13] = mixedNet99919;
assign cdsbus3[22] = mixedNet99917;
assign cdsbus3[26] = mixedNet99915;
assign cdsbus3[5] = mixedNet99914;
assign cdsbus3[6] = mixedNet99912;
assign cdsbus1[1] = mixedNet99910;
assign cdsbus3[25] = mixedNet99907;
assign cdsbus1[0] = mixedNet99906;
assign cdsbus3[24] = mixedNet99904;
assign cdsbus3[18] = mixedNet99903;
assign cdsbus2[4] = mixedNet99902;
assign cdsbus3[23] = mixedNet99901;
assign cdsbus1[7] = mixedNet99899;
assign cdsbus3[3] = mixedNet99897;
assign cdsbus0[3] = mixedNet99896;
assign cdsbus3[2] = mixedNet99888;
assign cdsbus3[1] = mixedNet99887;
assign cdsbus3[0] = mixedNet99886;
assign cdsbus1[6] = mixedNet99885;
assign cdsbus1[5] = mixedNet99879;
assign cdsNet1 = mixedNet99876;
assign cdsbus3[15] = mixedNet99873;
assign cdsbus3[12] = mixedNet99872;
assign cdsbus1[4] = mixedNet99870;
assign cdsbus1[3] = mixedNet99869;
assign cdsbus1[2] = mixedNet99867;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_SDP_BANK_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I28_19_ ( cdsbus6[19], R_Address[19]);
inv_1xT I28_18_ ( cdsbus6[18], R_Address[18]);
inv_1xT I28_17_ ( cdsbus6[17], R_Address[17]);
inv_1xT I28_16_ ( cdsbus6[16], R_Address[16]);
inv_1xT I28_15_ ( cdsbus6[15], R_Address[15]);
inv_1xT I28_14_ ( cdsbus6[14], R_Address[14]);
inv_1xT I28_13_ ( cdsbus6[13], R_Address[13]);
inv_1xT I28_12_ ( cdsbus6[12], R_Address[12]);
inv_1xT I28_11_ ( cdsbus6[11], R_Address[11]);
inv_1xT I28_10_ ( cdsbus6[10], R_Address[10]);
inv_1xT I28_9_ ( cdsbus6[9], R_Address[9]);
inv_1xT I28_8_ ( cdsbus6[8], R_Address[8]);
inv_1xT I28_7_ ( cdsbus6[7], R_Address[7]);
inv_1xT I28_6_ ( cdsbus6[6], R_Address[6]);
inv_1xT I28_5_ ( cdsbus6[5], R_Address[5]);
inv_1xT I28_4_ ( cdsbus6[4], R_Address[4]);
inv_1xT I28_3_ ( cdsbus6[3], R_Address[3]);
inv_1xT I28_2_ ( cdsbus6[2], R_Address[2]);
inv_1xT I28_1_ ( cdsbus6[1], R_Address[1]);
inv_1xT I28_0_ ( cdsbus6[0], R_Address[0]);
inv_1xT I27_1_ ( cdsbus9[1], RRW[1]);
inv_1xT I27_0_ ( cdsbus9[0], RRW[0]);
inv_1xT I24_4_ ( RA_Ack[4], cdsbus0[4]);
inv_1xT I24_3_ ( RA_Ack[3], cdsbus0[3]);
inv_1xT I24_2_ ( RA_Ack[2], cdsbus0[2]);
inv_1xT I24_1_ ( RA_Ack[1], cdsbus0[1]);
inv_1xT I24_0_ ( RA_Ack[0], cdsbus0[0]);
inv_1xT I23 ( ReadAck, cdsNet0);
inv_1xT I21_4_ ( WA_Ack[4], cdsbus2[4]);
inv_1xT I21_3_ ( WA_Ack[3], cdsbus2[3]);
inv_1xT I21_2_ ( WA_Ack[2], cdsbus2[2]);
inv_1xT I21_1_ ( WA_Ack[1], cdsbus2[1]);
inv_1xT I21_0_ ( WA_Ack[0], cdsbus2[0]);
inv_1xT I22 ( WriteAck, cdsNet1);
inv_1xT I4_31_ ( cdsbus4[31], WriteData[31]);
inv_1xT I4_30_ ( cdsbus4[30], WriteData[30]);
inv_1xT I4_29_ ( cdsbus4[29], WriteData[29]);
inv_1xT I4_28_ ( cdsbus4[28], WriteData[28]);
inv_1xT I4_27_ ( cdsbus4[27], WriteData[27]);
inv_1xT I4_26_ ( cdsbus4[26], WriteData[26]);
inv_1xT I4_25_ ( cdsbus4[25], WriteData[25]);
inv_1xT I4_24_ ( cdsbus4[24], WriteData[24]);
inv_1xT I4_23_ ( cdsbus4[23], WriteData[23]);
inv_1xT I4_22_ ( cdsbus4[22], WriteData[22]);
inv_1xT I4_21_ ( cdsbus4[21], WriteData[21]);
inv_1xT I4_20_ ( cdsbus4[20], WriteData[20]);
inv_1xT I4_19_ ( cdsbus4[19], WriteData[19]);
inv_1xT I4_18_ ( cdsbus4[18], WriteData[18]);
inv_1xT I4_17_ ( cdsbus4[17], WriteData[17]);
inv_1xT I4_16_ ( cdsbus4[16], WriteData[16]);
inv_1xT I4_15_ ( cdsbus4[15], WriteData[15]);
inv_1xT I4_14_ ( cdsbus4[14], WriteData[14]);
inv_1xT I4_13_ ( cdsbus4[13], WriteData[13]);
inv_1xT I4_12_ ( cdsbus4[12], WriteData[12]);
inv_1xT I4_11_ ( cdsbus4[11], WriteData[11]);
inv_1xT I4_10_ ( cdsbus4[10], WriteData[10]);
inv_1xT I4_9_ ( cdsbus4[9], WriteData[9]);
inv_1xT I4_8_ ( cdsbus4[8], WriteData[8]);
inv_1xT I4_7_ ( cdsbus4[7], WriteData[7]);
inv_1xT I4_6_ ( cdsbus4[6], WriteData[6]);
inv_1xT I4_5_ ( cdsbus4[5], WriteData[5]);
inv_1xT I4_4_ ( cdsbus4[4], WriteData[4]);
inv_1xT I4_3_ ( cdsbus4[3], WriteData[3]);
inv_1xT I4_2_ ( cdsbus4[2], WriteData[2]);
inv_1xT I4_1_ ( cdsbus4[1], WriteData[1]);
inv_1xT I4_0_ ( cdsbus4[0], WriteData[0]);
inv_1xT I7_31_ ( ReadData[31], cdsbus3[31]);
inv_1xT I7_30_ ( ReadData[30], cdsbus3[30]);
inv_1xT I7_29_ ( ReadData[29], cdsbus3[29]);
inv_1xT I7_28_ ( ReadData[28], cdsbus3[28]);
inv_1xT I7_27_ ( ReadData[27], cdsbus3[27]);
inv_1xT I7_26_ ( ReadData[26], cdsbus3[26]);
inv_1xT I7_25_ ( ReadData[25], cdsbus3[25]);
inv_1xT I7_24_ ( ReadData[24], cdsbus3[24]);
inv_1xT I7_23_ ( ReadData[23], cdsbus3[23]);
inv_1xT I7_22_ ( ReadData[22], cdsbus3[22]);
inv_1xT I7_21_ ( ReadData[21], cdsbus3[21]);
inv_1xT I7_20_ ( ReadData[20], cdsbus3[20]);
inv_1xT I7_19_ ( ReadData[19], cdsbus3[19]);
inv_1xT I7_18_ ( ReadData[18], cdsbus3[18]);
inv_1xT I7_17_ ( ReadData[17], cdsbus3[17]);
inv_1xT I7_16_ ( ReadData[16], cdsbus3[16]);
inv_1xT I7_15_ ( ReadData[15], cdsbus3[15]);
inv_1xT I7_14_ ( ReadData[14], cdsbus3[14]);
inv_1xT I7_13_ ( ReadData[13], cdsbus3[13]);
inv_1xT I7_12_ ( ReadData[12], cdsbus3[12]);
inv_1xT I7_11_ ( ReadData[11], cdsbus3[11]);
inv_1xT I7_10_ ( ReadData[10], cdsbus3[10]);
inv_1xT I7_9_ ( ReadData[9], cdsbus3[9]);
inv_1xT I7_8_ ( ReadData[8], cdsbus3[8]);
inv_1xT I7_7_ ( ReadData[7], cdsbus3[7]);
inv_1xT I7_6_ ( ReadData[6], cdsbus3[6]);
inv_1xT I7_5_ ( ReadData[5], cdsbus3[5]);
inv_1xT I7_4_ ( ReadData[4], cdsbus3[4]);
inv_1xT I7_3_ ( ReadData[3], cdsbus3[3]);
inv_1xT I7_2_ ( ReadData[2], cdsbus3[2]);
inv_1xT I7_1_ ( ReadData[1], cdsbus3[1]);
inv_1xT I7_0_ ( ReadData[0], cdsbus3[0]);
inv_1xT I9_7_ ( WD_Ack[7], cdsbus1[7]);
inv_1xT I9_6_ ( WD_Ack[6], cdsbus1[6]);
inv_1xT I9_5_ ( WD_Ack[5], cdsbus1[5]);
inv_1xT I9_4_ ( WD_Ack[4], cdsbus1[4]);
inv_1xT I9_3_ ( WD_Ack[3], cdsbus1[3]);
inv_1xT I9_2_ ( WD_Ack[2], cdsbus1[2]);
inv_1xT I9_1_ ( WD_Ack[1], cdsbus1[1]);
inv_1xT I9_0_ ( WD_Ack[0], cdsbus1[0]);
inv_1xT I12_7_ ( cdsbus5[7], RD_Ack[7]);
inv_1xT I12_6_ ( cdsbus5[6], RD_Ack[6]);
inv_1xT I12_5_ ( cdsbus5[5], RD_Ack[5]);
inv_1xT I12_4_ ( cdsbus5[4], RD_Ack[4]);
inv_1xT I12_3_ ( cdsbus5[3], RD_Ack[3]);
inv_1xT I12_2_ ( cdsbus5[2], RD_Ack[2]);
inv_1xT I12_1_ ( cdsbus5[1], RD_Ack[1]);
inv_1xT I12_0_ ( cdsbus5[0], RD_Ack[0]);
inv_1xT I26_1_ ( cdsbus7[1], WRW[1]);
inv_1xT I26_0_ ( cdsbus7[0], WRW[0]);
inv_1xT I25_19_ ( cdsbus8[19], W_Address[19]);
inv_1xT I25_18_ ( cdsbus8[18], W_Address[18]);
inv_1xT I25_17_ ( cdsbus8[17], W_Address[17]);
inv_1xT I25_16_ ( cdsbus8[16], W_Address[16]);
inv_1xT I25_15_ ( cdsbus8[15], W_Address[15]);
inv_1xT I25_14_ ( cdsbus8[14], W_Address[14]);
inv_1xT I25_13_ ( cdsbus8[13], W_Address[13]);
inv_1xT I25_12_ ( cdsbus8[12], W_Address[12]);
inv_1xT I25_11_ ( cdsbus8[11], W_Address[11]);
inv_1xT I25_10_ ( cdsbus8[10], W_Address[10]);
inv_1xT I25_9_ ( cdsbus8[9], W_Address[9]);
inv_1xT I25_8_ ( cdsbus8[8], W_Address[8]);
inv_1xT I25_7_ ( cdsbus8[7], W_Address[7]);
inv_1xT I25_6_ ( cdsbus8[6], W_Address[6]);
inv_1xT I25_5_ ( cdsbus8[5], W_Address[5]);
inv_1xT I25_4_ ( cdsbus8[4], W_Address[4]);
inv_1xT I25_3_ ( cdsbus8[3], W_Address[3]);
inv_1xT I25_2_ ( cdsbus8[2], W_Address[2]);
inv_1xT I25_1_ ( cdsbus8[1], W_Address[1]);
inv_1xT I25_0_ ( cdsbus8[0], W_Address[0]);

endmodule
