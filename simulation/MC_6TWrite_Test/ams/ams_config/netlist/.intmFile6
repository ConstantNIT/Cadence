
// 
// Design File for: (connectLib RL_Bidir_LPS module)
//
// RL_Bidir_LPS.vams - Basic Real to Logic bidirectional connection module
//
// REVISION HISTORY
// Created: 01/14/11, aspratt
// Created: 01/11, nzhang - this connect module is a copy from L2R.vams and specified for AMSLPS.

`include "disciplines.vams"
`timescale 1ns / 1ps

`define AMSLPS_VPSO       0
`define AMSLPS_NOMVDD     1
`define AMSLPS_NOMVSS     2
`define AMSLPS_VPMOSBIAS  3
`define AMSLPS_VNMOSBIAS  4
`define AMSLPS_AEGSIZE    5
`define AMSLPS_PWRSTATE_DIG 0
`define AMSLPS_PWRSTATE_ANA 1

// Power Smart RL_Bidir connect module
connectmodule RL_Bidir_LPS(R, L);
   inout L;
   inout R; wreal R;

   parameter real vsup = 1.8 from (0:inf);      // nominal supply voltage
   parameter real vlo = 0;                      // logic low voltage
   parameter real vhi = vsup from (vlo:vsup];   // logic high voltage
   parameter real vtlo = vsup / 3;              // lower threshold
   parameter real vthi = vsup /1.5;             // upper threshold

   wreal       R_val;
   reg         R_conv;
   wire [1:0]  L_val;
   real        L_conv;

   // LOCAL VARIABLES for AMSLPS:
   reg  [1:0]iPwrState=2'b11;               // register the power state
   real vPwrArgArray[`AMSLPS_AEGSIZE-1:0];  // voltages value of the nominal condition

   initial
     begin
        /* set the initial value to Z */
        $input_logic_value(L, L_val); // set logic driver sensitivity
        $input_real_value(R, R_val);  // set real driver sensitivity
        R_conv = 1'bz;
        L_conv = `wrealZState;
        /* set the initial value for AMSLPS variables */
        vPwrArgArray[`AMSLPS_NOMVDD]=vhi;
        vPwrArgArray[`AMSLPS_NOMVSS]=vlo;
        vPwrArgArray[`AMSLPS_VPSO]=`wrealXState;
        $amslps_power_state_register(iPwrState, vPwrArgArray);
     end

   // Determine the value of R and convert to a logic value
   always
     begin
        if (iPwrState[`AMSLPS_PWRSTATE_ANA]===1'b0) begin
            R_conv = 1'bx;
        end
        else begin
          if(R_val >= vPwrArgArray[`AMSLPS_NOMVDD]/1.5)
            R_conv = 1'b1;
          else if (R_val <= vPwrArgArray[`AMSLPS_NOMVDD]/3)
            R_conv = 1'b0;
          else if(R_val === `wrealZState)
            R_conv = 1'bz;
          else
            R_conv = 1'bx;
        end
        @(R_val or iPwrState);
     end

   // Determine the value of L and convert to a real value
   always
     begin
       case (L_val)
         2'b00: L_conv = vPwrArgArray[`AMSLPS_NOMVSS];
         2'b01: L_conv = vPwrArgArray[`AMSLPS_NOMVDD];
         2'b10: L_conv = `wrealZState;
         2'b11: begin
             if (iPwrState[`AMSLPS_PWRSTATE_DIG]===1'b0)
                L_conv = vPwrArgArray[`AMSLPS_VPSO];
             else
                L_conv = `wrealXState;
         end
       endcase
       @(L_val or iPwrState);
     end


   // drive the converted value back onto the output R pin
   assign R = L_conv;
   
   // drive the converted value back onto the output L pin
   assign L = R_conv;

endmodule
