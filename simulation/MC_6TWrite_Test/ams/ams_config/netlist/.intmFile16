
// 
// Design File for: (connectLib R2E_2 module)
//
// R2E_2.vams - Efficient Verilog-AMS discrete wreal to electrical connection module
//
// REVISION HISTORY:
// Created:  09/01/08, gangchen
// Revised to support current mode:  04/24/14, zhipeng, jhou
// Enhanced for wreal current mode: 11/3/14, asadigh, zhipeng, jhou

`include "disciplines.vams"
`timescale 1ns / 1ps
 
connectmodule R2E_2 (Din, Aout);
  input Din;
  wreal Din;		// input wreal
  \logic Din;
  output Aout;
  electrical Aout;	// output electrical

  parameter real vss=0             from (-inf:inf); // Voltage of negative supply
  parameter real vsup=1.8          from (0:inf);    // supply voltage based on vss
  parameter real vdelta=vsup/64    from (0:vsup];   // voltage delta
  parameter real vx=vss            from [0:vsup];   // X output voltage
  parameter real tr=10p            from (0:inf);    // risetime of analog output
  parameter real tf=tr             from (0:inf);    // falltime of analog output
  parameter real ttol_t=(tr+tf)/20 from (0:inf);    // time tol of transition
  parameter real tdelay=0          from [0:1m);     // delay time of analog output
  parameter real rout=200          from (0:inf);    // output resistance
  parameter real rx=rout           from (0:inf);    // X output resistance
  parameter real rz=10M            from (0:inf);    // Z output resistance
  parameter integer currentmode=0  from [0:1];      // 0: voltage, 1: current mode
  parameter real idelta=10u        from (0:inf);    // current delta
  parameter real ix=0              from [0:inf);    // X output current
  parameter real i0=0              from [0:inf);    // 0 output current
  parameter integer clamp=0        from [0:1];      // 0: disable, 1: enable clamp
  parameter real dvclamp=vsup/20   from (0:vsup/2); // clamp zoon from supply

  parameter real vdd=vss+vsup;               // internal parameter: vss+vsup
  parameter real vdd10=vdd+vsup*10;          // internal parameter: vdd+vsup*10
  parameter real vss10=vss-vsup*10;          // internal parameter: vss-vsup*10
  real RealN, Rstate;
  real RealA;                          //analog value converted from wreal
  real VprevA;                         //voltage at previous analog-step
  real Rout;                           //impedence converted from wreal driver

  reg sie;
  initial begin
    if (Din === `wrealXState)
      begin RealN = currentmode?ix:vx; Rstate = rx; end
    else if (Din === `wrealZState)
      begin RealN = currentmode?i0:vss; Rstate = rz; end
    else
      begin RealN = Din; Rstate = rout; end
    sie = $strength_resolution(Din);
  end

  always begin
    if (Din === `wrealXState)
      begin RealN = currentmode?ix:vx; Rstate = rx; end
    else if (Din === `wrealZState)
      begin
        Rstate = rz;            //in voltage mode, Z means float, so Rout is rz
        if (currentmode) RealN = i0;  //in current mode, Z means open circuit, so I=i0
      end
    else begin
      Rstate = rout;
      if (currentmode) begin
        if ( abs(Din-RealN) >= idelta) RealN = Din; end
      else
        if (abs(Din-RealN) >= vdelta) RealN = Din;
    end
    @(Din);
  end

  assign Din = sie? `wrealZState : Din;

  analog initial VprevA = vss;
  analog begin
    RealA = transition(RealN, tdelay, tr, tf, ttol_t);
    Rout = transition(Rstate, tdelay, tr, tf, ttol_t);
    if (currentmode) begin
      if (RealA > 0) begin
        if (clamp) begin
          if (V(Aout) > vdd - dvclamp) begin
            if (VprevA < vdd - dvclamp)
              $display("Warning: AMS IE %M at %g: wreal Din=%g is causing V(Aout)=%g being clamped near vdd. Please check for any mismatch between the electrical circuit and the R2E",
                $abstime, RealN, V(Aout));
            VprevA = V(Aout);
            RealA = RealA * (vdd - V(Aout)) / dvclamp;
          end
        end else begin
          if (V(Aout) > vdd10 ) begin
            if (VprevA < vdd10 )
              $display("Warning: AMS IE %M at %g: wreal Din=%g is causing V(Aout)=%g being 10x vsup above vdd. Please check for any mismatch between the electrical circuit and the R2E",
                $abstime, RealN, V(Aout));
            VprevA = V(Aout);
          end
        end
      end else begin
        if (clamp) begin
          if ( V(Aout) < vss + dvclamp ) begin
            if ( VprevA > vss + dvclamp )
              $display("Warning: AMS IE %M at %g: wreal Din=%g is causing V(Aout)=%g being clamped near vss. Please check for any mismatch between the electrical circuit and the R2E",
               $abstime, RealN, V(Aout));
            VprevA = V(Aout);
            RealA = RealA * (V(Aout) - vss) / dvclamp;
          end
        end else begin
          if ( V(Aout) < vss10 ) begin
            if ( VprevA > vss10 )
              $display("Warning: AMS IE %M at %g: wreal Din=%g is causing V(Aout)=%g being 10x vsup below vss. Please check for any mismatch between the electrical circuit and the R2E",
               $abstime, RealN, V(Aout));
            VprevA = V(Aout);
          end
        end
      end
      I(Aout) <+ -RealA + V(Aout)/rz;
    end else begin
      I(Aout) <+ (V(Aout) - RealA) / Rout;
    end
  end

endmodule
