
// 
// Design File for: (connectLib R2L_LPS module)
//
// R2L_LPS.vams - Basic Real to Logic connection module
//
// REVISION HISTORY
// Created: 01/14/11, aspratt
// Created: 01/11, nzhang - this connect module is a copy from L2R.vams and specified for AMSLPS.

`include "disciplines.vams"
`timescale 1ns / 1ps

`define AMSLPS_VPSO       0
`define AMSLPS_NOMVDD     1
`define AMSLPS_NOMVSS     2
`define AMSLPS_VPMOSBIAS  3
`define AMSLPS_VNMOSBIAS  4
`define AMSLPS_AEGSIZE    5

// Power Smart R2L connect module
connectmodule R2L_LPS(Rin, Lout);
   output Lout;
   input  Rin; wreal Rin;

   parameter real vsup = 1.8 from (0:inf);      // nominal supply voltage
   parameter real vlo = 0;                      // logic low voltage
   parameter real vhi = vsup from (vlo:vsup];   // logic high voltage
   parameter real vtlo = vsup / 3;              // lower threshold
   parameter real vthi = vsup /1.5;             // upper threshold

   reg R_conv;

   // LOCAL VARIABLES for AMSLPS:
   reg  iPwrState=1;                        // register of the power state
   real vPwrArgArray[`AMSLPS_AEGSIZE-1:0];  // voltages value of the nominal condition

   initial
     begin
        /* set the initial value to Z */
        R_conv = 1'bz;
        /* set the initial value for AMSLPS variables */
        vPwrArgArray[`AMSLPS_NOMVDD]=vhi;
        vPwrArgArray[`AMSLPS_NOMVSS]=vlo;
        vPwrArgArray[`AMSLPS_VPSO]=0.0;
        $amslps_power_state_register(iPwrState, vPwrArgArray);
     end

   // Determine the value of R and convert to a logic value
   always
     begin
        if (iPwrState===1'b0) begin
            R_conv = 1'bx;
        end
        else begin
          if(Rin >= vPwrArgArray[`AMSLPS_NOMVDD]/1.5)
            R_conv = 1'b1;
          else if (Rin <= vPwrArgArray[`AMSLPS_NOMVDD]/3)
            R_conv = 1'b0;
          else if(Rin === `wrealZState)
            R_conv = 1'bz;
          else
            R_conv = 1'bx;
        end
        @(Rin or iPwrState);
     end

   // drive the converted value back onto the output L pin
   assign Lout = R_conv;

endmodule
