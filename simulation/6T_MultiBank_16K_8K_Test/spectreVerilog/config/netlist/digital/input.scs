
`timescale 1ps / 1ps

module test;


wire  ReadAck, WriteAck;

reg  ReadEn, WriteEn;

wire [15:0]  WDataAck;
wire [31:0]  RData;

reg [31:0]  WData;
reg [11:0]  W_Address;
reg [11:0]  R_Address;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_99 top(RData, ReadAck, WDataAck, WriteAck, R_Address, ReadEn
     , WData, W_Address, WriteEn); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 
// Vermix stimulus file.
// Default verimix stimulus. 

integer rLog;
integer wLog;
integer seed;
integer start;
integer i;
reg[11:0] lastWriteAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;


initial
begin 

   seed = 5;
   start = 0;
   rLog=$fopen("/tmp2/16K_mem_RLog.csv");
   $fdisplay(rLog, "R_Address, RData[31:0], total_time(ps), read_delay(ps)");

   wLog=$fopen("/tmp2/16K_mem_WLog.csv"); 
   $fdisplay(wLog, "W_Address, WData[31:0], , total_time(ps), write_delay(ps)");

   R_Address[11:0] = 12'h000;
   ReadEn = 1'b0;
   WData[31:0] = 32'h00000000;
   W_Address[11:0] = 12'h000;
   WriteEn = 1'b0;
#1000;

// Perform Read
   rStart = $time;
   R_Address[11:0] = lastWriteAddr[11:0];
   ReadEn          = 1'b1;
   wait(ReadAck);
   rDelay = $time - rStart;
   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[31:0], $time, rDelay); 

// Null Read
   rStart = $time;
   ReadEn = 1'b0;
   R_Address[11:0] = 12'h000;
   wait(~ReadAck);
   rDelay = $time - rStart;
   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[31:0], $time, rDelay); 

// Perform Write
   wStart          = $time;
   WriteEn         = 1'b1;
   WData[31:0]     = $random(seed);
   W_Address[11:0] = 12'h000;
   wait(WriteAck);
   wDelay = $time - wStart;
   $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], WData[31:0], $time, wDelay); 

//Null Write
   WriteEn = 1'b0;
   W_Address[11:0] = 12'h000;
   WData[31:0] = 32'h00000000;
   wait(~WriteAck);
   wDelay = $time - wStart;
   $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], WData[31:0], $time, wDelay); 


// Start reading + writing simultaneously
   WData[31:0] = $random;
   W_Address[11:0] = 12'h000;
   R_Address[11:0] = lastWriteAddr[11:0];
   ReadEn  = 1'b1;
   WriteEn = 1'b1;
   rStart  = $time;
   wStart  = $time;
   start   = 1;
end 


always @(posedge WriteAck) begin
   if (start==1) begin
   	  wDelay = $time - wStart;
   	  $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], WData[31:0], $time, wDelay);
          lastWriteAddr[11:0] <= W_Address[11:0];
   	  WData[31:0] = 32'h00000000;
   	  WriteEn  = 1'b0;  
          wStart   = $time;
   end
end

always @(negedge WriteAck) begin
   if (start==1) begin
   	   wDelay = $time - wStart;
   	   $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], WData[31:0], $time, wDelay);   	   
           WData[31:0]      = $random;
   	   W_Address[11:0]   = $random;

// Check not one of missing banks           
	   if (W_Address[11:10] == 2'b11) begin
               W_Address[11:10] == 2'b01;
	   end
           if (W_Address[11:10] == 2'b10) begin
	       W_Address[11:10] == 2'b00;
           end

           WriteEn   = 1'b1;  
	   wStart    = $time;
   end
end

always @(negedge ReadAck) begin
   if (start==1) begin
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[31:0], $time, rDelay);   	   
   	   R_Address[11:0] = lastWriteAddr[11:0];
// Check not same bank
           if (R_Address[11:10] == W_Address[11:10]) begin
	       R_Address[11:10] = ~R_Address[11:10];
           end

// Check not one of missing 2/4 banks
           if (R_Address[11:10] == 2'b11) begin
               R_Address[11:10] == 2'b01;
	   end
           if (R_Address[11:10] == 2'b10) begin
	       R_Address[11:10] == 2'b00;
           end

           ReadEn      = 1'b1;
	   rStart      = $time;
   end
end

always @(posedge ReadAck) begin
   if (start==1) begin
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[31:0], $time, rDelay);   	   
           ReadEn         = 1'b0; 
           R_Address[11:0] = 12'h000;
	   rStart        = $time;
   end
end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /~WDataAck<8>
	$vmx_define_import( test.top.mixedNet99998, "99998"); // /~RData<30>
	$vmx_define_import( test.top.mixedNet99997, "99997"); // /~RData<31>
	$vmx_define_export( test.top.cdsNet1, "99996"); // /~WriteEn
	$vmx_define_import( test.top.mixedNet99995, "99995"); // /~WAck
	$vmx_define_import( test.top.mixedNet99994, "99994"); // /~RAck
	$vmx_define_import( test.top.mixedNet99993, "99993"); // /~WDataAck<15>
	$vmx_define_export( test.top.cdsbus2[0], "99992"); // /~R_Address<0>
	$vmx_define_export( test.top.cdsbus2[1], "99991"); // /~R_Address<1>
	$vmx_define_export( test.top.cdsbus2[2], "99990"); // /~R_Address<2>
	$vmx_define_export( test.top.cdsbus2[3], "99989"); // /~R_Address<3>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /~RData<6>
	$vmx_define_import( test.top.mixedNet99987, "99987"); // /~RData<7>
	$vmx_define_import( test.top.mixedNet99986, "99986"); // /~RData<8>
	$vmx_define_import( test.top.mixedNet99985, "99985"); // /~RData<9>
	$vmx_define_import( test.top.mixedNet99984, "99984"); // /~RData<10>
	$vmx_define_import( test.top.mixedNet99983, "99983"); // /~RData<11>
	$vmx_define_import( test.top.mixedNet99982, "99982"); // /~RData<12>
	$vmx_define_import( test.top.mixedNet99981, "99981"); // /~RData<19>
	$vmx_define_import( test.top.mixedNet99980, "99980"); // /~RData<20>
	$vmx_define_import( test.top.mixedNet99979, "99979"); // /~RData<21>
	$vmx_define_import( test.top.mixedNet99978, "99978"); // /~RData<22>
	$vmx_define_import( test.top.mixedNet99977, "99977"); // /~RData<5>
	$vmx_define_export( test.top.cdsbus3[0], "99976"); // /~WData<0>
	$vmx_define_export( test.top.cdsbus3[1], "99975"); // /~WData<1>
	$vmx_define_export( test.top.cdsbus3[2], "99974"); // /~WData<2>
	$vmx_define_export( test.top.cdsbus3[3], "99973"); // /~WData<3>
	$vmx_define_export( test.top.cdsbus3[4], "99972"); // /~WData<4>
	$vmx_define_export( test.top.cdsbus3[5], "99971"); // /~WData<5>
	$vmx_define_export( test.top.cdsbus3[6], "99970"); // /~WData<6>
	$vmx_define_import( test.top.mixedNet99969, "99969"); // /~RData<2>
	$vmx_define_import( test.top.mixedNet99968, "99968"); // /~RData<3>
	$vmx_define_import( test.top.mixedNet99967, "99967"); // /~RData<4>
	$vmx_define_export( test.top.cdsbus3[20], "99966"); // /~WData<20>
	$vmx_define_export( test.top.cdsbus3[19], "99965"); // /~WData<19>
	$vmx_define_export( test.top.cdsbus3[7], "99964"); // /~WData<7>
	$vmx_define_export( test.top.cdsbus4[9], "99963"); // /~W_Address<9>
	$vmx_define_export( test.top.cdsbus4[10], "99962"); // /~W_Address<10>
	$vmx_define_export( test.top.cdsbus4[11], "99961"); // /~W_Address<11>
	$vmx_define_import( test.top.mixedNet99960, "99960"); // /~RData<1>
	$vmx_define_export( test.top.cdsbus3[18], "99959"); // /~WData<18>
	$vmx_define_import( test.top.mixedNet99958, "99958"); // /~RData<0>
	$vmx_define_export( test.top.cdsbus3[31], "99957"); // /~WData<31>
	$vmx_define_export( test.top.cdsbus3[27], "99956"); // /~WData<27>
	$vmx_define_export( test.top.cdsbus3[28], "99955"); // /~WData<28>
	$vmx_define_export( test.top.cdsbus3[29], "99954"); // /~WData<29>
	$vmx_define_export( test.top.cdsbus3[30], "99953"); // /~WData<30>
	$vmx_define_export( test.top.cdsbus3[21], "99952"); // /~WData<21>
	$vmx_define_import( test.top.mixedNet99951, "99951"); // /~WDataAck<11>
	$vmx_define_import( test.top.mixedNet99950, "99950"); // /~WDataAck<10>
	$vmx_define_import( test.top.mixedNet99949, "99949"); // /~RData<24>
	$vmx_define_import( test.top.mixedNet99948, "99948"); // /~WDataAck<9>
	$vmx_define_export( test.top.cdsbus2[10], "99947"); // /~R_Address<10>
	$vmx_define_export( test.top.cdsbus2[9], "99946"); // /~R_Address<9>
	$vmx_define_import( test.top.mixedNet99945, "99945"); // /~RData<29>
	$vmx_define_export( test.top.cdsbus2[8], "99944"); // /~R_Address<8>
	$vmx_define_export( test.top.cdsbus2[7], "99943"); // /~R_Address<7>
	$vmx_define_export( test.top.cdsbus2[11], "99942"); // /~R_Address<11>
	$vmx_define_export( test.top.cdsbus2[6], "99941"); // /~R_Address<6>
	$vmx_define_import( test.top.mixedNet99940, "99940"); // /~RData<26>
	$vmx_define_import( test.top.mixedNet99939, "99939"); // /~RData<23>
	$vmx_define_import( test.top.mixedNet99938, "99938"); // /~WDataAck<14>
	$vmx_define_import( test.top.mixedNet99937, "99937"); // /~WDataAck<12>
	$vmx_define_export( test.top.cdsbus2[5], "99936"); // /~R_Address<5>
	$vmx_define_import( test.top.mixedNet99935, "99935"); // /~RData<28>
	$vmx_define_import( test.top.mixedNet99934, "99934"); // /~RData<27>
	$vmx_define_import( test.top.mixedNet99933, "99933"); // /~RData<18>
	$vmx_define_import( test.top.mixedNet99932, "99932"); // /~RData<25>
	$vmx_define_import( test.top.mixedNet99931, "99931"); // /~RData<17>
	$vmx_define_import( test.top.mixedNet99930, "99930"); // /~RData<16>
	$vmx_define_import( test.top.mixedNet99929, "99929"); // /~RData<15>
	$vmx_define_export( test.top.cdsbus2[4], "99928"); // /~R_Address<4>
	$vmx_define_import( test.top.mixedNet99927, "99927"); // /~RData<14>
	$vmx_define_import( test.top.mixedNet99926, "99926"); // /~RData<13>
	$vmx_define_export( test.top.cdsbus4[5], "99925"); // /~W_Address<5>
	$vmx_define_export( test.top.cdsbus3[25], "99924"); // /~WData<25>
	$vmx_define_export( test.top.cdsbus4[4], "99923"); // /~W_Address<4>
	$vmx_define_export( test.top.cdsbus4[3], "99922"); // /~W_Address<3>
	$vmx_define_import( test.top.mixedNet99921, "99921"); // /~WDataAck<4>
	$vmx_define_import( test.top.mixedNet99920, "99920"); // /~WDataAck<5>
	$vmx_define_import( test.top.mixedNet99919, "99919"); // /~WDataAck<6>
	$vmx_define_import( test.top.mixedNet99918, "99918"); // /~WDataAck<7>
	$vmx_define_import( test.top.mixedNet99917, "99917"); // /~WDataAck<3>
	$vmx_define_import( test.top.mixedNet99916, "99916"); // /~WDataAck<2>
	$vmx_define_export( test.top.cdsbus3[24], "99915"); // /~WData<24>
	$vmx_define_import( test.top.mixedNet99914, "99914"); // /~WDataAck<1>
	$vmx_define_export( test.top.cdsbus3[23], "99913"); // /~WData<23>
	$vmx_define_import( test.top.mixedNet99912, "99912"); // /~WDataAck<0>
	$vmx_define_export( test.top.cdsbus3[22], "99911"); // /~WData<22>
	$vmx_define_export( test.top.cdsbus3[26], "99910"); // /~WData<26>
	$vmx_define_export( test.top.cdsbus4[7], "99909"); // /~W_Address<7>
	$vmx_define_export( test.top.cdsbus4[8], "99908"); // /~W_Address<8>
	$vmx_define_import( test.top.mixedNet99907, "99907"); // /~WDataAck<13>
	$vmx_define_export( test.top.cdsNet3, "99906"); // /~ReadEn
	$vmx_define_export( test.top.cdsbus4[0], "99905"); // /~W_Address<0>
	$vmx_define_export( test.top.cdsbus4[1], "99904"); // /~W_Address<1>
	$vmx_define_export( test.top.cdsbus4[2], "99903"); // /~W_Address<2>
	$vmx_define_export( test.top.cdsbus4[6], "99902"); // /~W_Address<6>
	$vmx_define_export( test.top.cdsbus3[8], "99901"); // /~WData<8>
	$vmx_define_export( test.top.cdsbus3[9], "99900"); // /~WData<9>
	$vmx_define_export( test.top.cdsbus3[10], "99899"); // /~WData<10>
	$vmx_define_export( test.top.cdsbus3[14], "99898"); // /~WData<14>
	$vmx_define_export( test.top.cdsbus3[13], "99897"); // /~WData<13>
	$vmx_define_export( test.top.cdsbus3[12], "99896"); // /~WData<12>
	$vmx_define_export( test.top.cdsbus3[11], "99895"); // /~WData<11>
	$vmx_define_export( test.top.cdsbus3[17], "99894"); // /~WData<17>
	$vmx_define_export( test.top.cdsbus3[16], "99893"); // /~WData<16>
	$vmx_define_export( test.top.cdsbus3[15], "99892"); // /~WData<15>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.WData[18], test.top.WData[19], test.top.WData[26], test.top.ReadEn, test.top.RData[26], test.top.WriteEn, test.top.WDataAck[9], test.top.WDataAck[10], test.top.WDataAck[11], test.top.WDataAck[12], test.top.WDataAck[13], test.top.WDataAck[14], test.top.WDataAck[15], test.top.WDataAck[1], test.top.WDataAck[2], test.top.WriteAck, test.top.WData[29], test.top.W_Address[6], test.top.WData[28], test.top.W_Address[8], test.top.RData[13], test.top.RData[14], test.top.RData[15], test.top.RData[24], test.top.RData[27], test.top.RData[31], test.top.RData[29], test.top.RData[25], test.top.WDataAck[0], test.top.W_Address[10], test.top.WData[25], test.top.RData[28], test.top.WData[31], test.top.RData[30], test.top.WData[27], test.top.WData[24], test.top.WData[15], test.top.WData[14], test.top.WData[13], test.top.WData[12], test.top.WData[11], test.top.WData[10], test.top.WData[9], test.top.WData[8], test.top.WData[7], test.top.WData[17], test.top.WData[16], test.top.WData[6], test.top.WData[5], 
test.top.WData[4], test.top.WData[3], test.top.W_Address[9], test.top.W_Address[5], test.top.RData[16], test.top.RData[17], test.top.RData[18], test.top.RData[19], test.top.WData[23], test.top.WData[22], test.top.W_Address[0], test.top.W_Address[1], test.top.W_Address[2], test.top.W_Address[3], test.top.W_Address[4], test.top.W_Address[7], test.top.W_Address[11], test.top.WData[20], test.top.WData[21], test.top.WData[2], test.top.WData[1], test.top.WData[0], test.top.ReadAck, test.top.RData[3], test.top.RData[20], test.top.RData[21], test.top.RData[22], test.top.RData[23], test.top.RData[1], test.top.RData[0], test.top.WDataAck[8], test.top.WDataAck[7], test.top.WDataAck[4], test.top.WDataAck[5], test.top.WDataAck[6], test.top.RData[12], test.top.RData[11], test.top.RData[10], test.top.RData[8], test.top.RData[9], test.top.RData[7], test.top.RData[6], test.top.RData[5], test.top.RData[4], test.top.RData[2], test.top.WDataAck[3], test.top.R_Address[0], test.top.R_Address[1], test.top.R_Address[2], 
test.top.R_Address[3], test.top.R_Address[4], test.top.R_Address[5], test.top.R_Address[6], test.top.R_Address[7], test.top.R_Address[8], test.top.R_Address[9], test.top.R_Address[10], test.top.R_Address[11], test.top.WData[30], test.top.WData[31:0], test.top.R_Address[11:0], test.top.RData[31:0], test.top.W_Address[11:0], test.top.WDataAck[15:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_MultiBank_16K_Test, View - schematic
// LAST TIME SAVED: Mar  7 22:21:47 2015
// NETLIST TIME: Mar  8 13:57:19 2015
`timescale 1ps / 1ps 

module cdsModule_99 ( RData, ReadAck, WDataAck, WriteAck, R_Address,
     ReadEn, WData, W_Address, WriteEn );

output  ReadAck, WriteAck;

input  ReadEn, WriteEn;

output [15:0]  WDataAck;
output [31:0]  RData;

input [31:0]  WData;
input [11:0]  W_Address;
input [11:0]  R_Address;

// Buses in the design

wire  [11:0]  R_AddressT;

wire  [31:0]  cdsbus0;

wire  [15:0]  cdsbus1;

wire  [15:0]  WDataAckT;

wire  [31:0]  WDataT;

wire  [11:0]  W_AddressT;

wire  [11:0]  cdsbus2;

wire  [31:0]  cdsbus3;

wire  [11:0]  cdsbus4;

wire  [31:0]  RDataT;

// begin interface element definitions

wire cdsNet2;
wire cdsNet0;
reg mixedNet99999;
reg mixedNet99998;
reg mixedNet99997;
reg mixedNet99995;
reg mixedNet99994;
reg mixedNet99993;
reg mixedNet99988;
reg mixedNet99987;
reg mixedNet99986;
reg mixedNet99985;
reg mixedNet99984;
reg mixedNet99983;
reg mixedNet99982;
reg mixedNet99981;
reg mixedNet99980;
reg mixedNet99979;
reg mixedNet99978;
reg mixedNet99977;
reg mixedNet99969;
reg mixedNet99968;
reg mixedNet99967;
reg mixedNet99960;
reg mixedNet99958;
reg mixedNet99951;
reg mixedNet99950;
reg mixedNet99949;
reg mixedNet99948;
reg mixedNet99945;
reg mixedNet99940;
reg mixedNet99939;
reg mixedNet99938;
reg mixedNet99937;
reg mixedNet99935;
reg mixedNet99934;
reg mixedNet99933;
reg mixedNet99932;
reg mixedNet99931;
reg mixedNet99930;
reg mixedNet99929;
reg mixedNet99927;
reg mixedNet99926;
reg mixedNet99921;
reg mixedNet99920;
reg mixedNet99919;
reg mixedNet99918;
reg mixedNet99917;
reg mixedNet99916;
reg mixedNet99914;
reg mixedNet99912;
reg mixedNet99907;
assign cdsbus1[8] = mixedNet99999;
assign cdsbus0[30] = mixedNet99998;
assign cdsbus0[31] = mixedNet99997;
assign cdsNet2 = mixedNet99995;
assign cdsNet0 = mixedNet99994;
assign cdsbus1[15] = mixedNet99993;
assign cdsbus0[6] = mixedNet99988;
assign cdsbus0[7] = mixedNet99987;
assign cdsbus0[8] = mixedNet99986;
assign cdsbus0[9] = mixedNet99985;
assign cdsbus0[10] = mixedNet99984;
assign cdsbus0[11] = mixedNet99983;
assign cdsbus0[12] = mixedNet99982;
assign cdsbus0[19] = mixedNet99981;
assign cdsbus0[20] = mixedNet99980;
assign cdsbus0[21] = mixedNet99979;
assign cdsbus0[22] = mixedNet99978;
assign cdsbus0[5] = mixedNet99977;
assign cdsbus0[2] = mixedNet99969;
assign cdsbus0[3] = mixedNet99968;
assign cdsbus0[4] = mixedNet99967;
assign cdsbus0[1] = mixedNet99960;
assign cdsbus0[0] = mixedNet99958;
assign cdsbus1[11] = mixedNet99951;
assign cdsbus1[10] = mixedNet99950;
assign cdsbus0[24] = mixedNet99949;
assign cdsbus1[9] = mixedNet99948;
assign cdsbus0[29] = mixedNet99945;
assign cdsbus0[26] = mixedNet99940;
assign cdsbus0[23] = mixedNet99939;
assign cdsbus1[14] = mixedNet99938;
assign cdsbus1[12] = mixedNet99937;
assign cdsbus0[28] = mixedNet99935;
assign cdsbus0[27] = mixedNet99934;
assign cdsbus0[18] = mixedNet99933;
assign cdsbus0[25] = mixedNet99932;
assign cdsbus0[17] = mixedNet99931;
assign cdsbus0[16] = mixedNet99930;
assign cdsbus0[15] = mixedNet99929;
assign cdsbus0[14] = mixedNet99927;
assign cdsbus0[13] = mixedNet99926;
assign cdsbus1[4] = mixedNet99921;
assign cdsbus1[5] = mixedNet99920;
assign cdsbus1[6] = mixedNet99919;
assign cdsbus1[7] = mixedNet99918;
assign cdsbus1[3] = mixedNet99917;
assign cdsbus1[2] = mixedNet99916;
assign cdsbus1[1] = mixedNet99914;
assign cdsbus1[0] = mixedNet99912;
assign cdsbus1[13] = mixedNet99907;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_MultiBank_16K_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I12 ( ReadAck, cdsNet0);
inv_1xT I16 ( cdsNet1, WriteEn);
inv_1xT I8_31_ ( RData[31], cdsbus0[31]);
inv_1xT I8_30_ ( RData[30], cdsbus0[30]);
inv_1xT I8_29_ ( RData[29], cdsbus0[29]);
inv_1xT I8_28_ ( RData[28], cdsbus0[28]);
inv_1xT I8_27_ ( RData[27], cdsbus0[27]);
inv_1xT I8_26_ ( RData[26], cdsbus0[26]);
inv_1xT I8_25_ ( RData[25], cdsbus0[25]);
inv_1xT I8_24_ ( RData[24], cdsbus0[24]);
inv_1xT I8_23_ ( RData[23], cdsbus0[23]);
inv_1xT I8_22_ ( RData[22], cdsbus0[22]);
inv_1xT I8_21_ ( RData[21], cdsbus0[21]);
inv_1xT I8_20_ ( RData[20], cdsbus0[20]);
inv_1xT I8_19_ ( RData[19], cdsbus0[19]);
inv_1xT I8_18_ ( RData[18], cdsbus0[18]);
inv_1xT I8_17_ ( RData[17], cdsbus0[17]);
inv_1xT I8_16_ ( RData[16], cdsbus0[16]);
inv_1xT I8_15_ ( RData[15], cdsbus0[15]);
inv_1xT I8_14_ ( RData[14], cdsbus0[14]);
inv_1xT I8_13_ ( RData[13], cdsbus0[13]);
inv_1xT I8_12_ ( RData[12], cdsbus0[12]);
inv_1xT I8_11_ ( RData[11], cdsbus0[11]);
inv_1xT I8_10_ ( RData[10], cdsbus0[10]);
inv_1xT I8_9_ ( RData[9], cdsbus0[9]);
inv_1xT I8_8_ ( RData[8], cdsbus0[8]);
inv_1xT I8_7_ ( RData[7], cdsbus0[7]);
inv_1xT I8_6_ ( RData[6], cdsbus0[6]);
inv_1xT I8_5_ ( RData[5], cdsbus0[5]);
inv_1xT I8_4_ ( RData[4], cdsbus0[4]);
inv_1xT I8_3_ ( RData[3], cdsbus0[3]);
inv_1xT I8_2_ ( RData[2], cdsbus0[2]);
inv_1xT I8_1_ ( RData[1], cdsbus0[1]);
inv_1xT I8_0_ ( RData[0], cdsbus0[0]);
inv_1xT I15 ( WriteAck, cdsNet2);
inv_1xT I10 ( cdsNet3, ReadEn);
inv_1xT I7_11_ ( cdsbus4[11], W_Address[11]);
inv_1xT I7_10_ ( cdsbus4[10], W_Address[10]);
inv_1xT I7_9_ ( cdsbus4[9], W_Address[9]);
inv_1xT I7_8_ ( cdsbus4[8], W_Address[8]);
inv_1xT I7_7_ ( cdsbus4[7], W_Address[7]);
inv_1xT I7_6_ ( cdsbus4[6], W_Address[6]);
inv_1xT I7_5_ ( cdsbus4[5], W_Address[5]);
inv_1xT I7_4_ ( cdsbus4[4], W_Address[4]);
inv_1xT I7_3_ ( cdsbus4[3], W_Address[3]);
inv_1xT I7_2_ ( cdsbus4[2], W_Address[2]);
inv_1xT I7_1_ ( cdsbus4[1], W_Address[1]);
inv_1xT I7_0_ ( cdsbus4[0], W_Address[0]);
inv_1xT I2_11_ ( cdsbus2[11], R_Address[11]);
inv_1xT I2_10_ ( cdsbus2[10], R_Address[10]);
inv_1xT I2_9_ ( cdsbus2[9], R_Address[9]);
inv_1xT I2_8_ ( cdsbus2[8], R_Address[8]);
inv_1xT I2_7_ ( cdsbus2[7], R_Address[7]);
inv_1xT I2_6_ ( cdsbus2[6], R_Address[6]);
inv_1xT I2_5_ ( cdsbus2[5], R_Address[5]);
inv_1xT I2_4_ ( cdsbus2[4], R_Address[4]);
inv_1xT I2_3_ ( cdsbus2[3], R_Address[3]);
inv_1xT I2_2_ ( cdsbus2[2], R_Address[2]);
inv_1xT I2_1_ ( cdsbus2[1], R_Address[1]);
inv_1xT I2_0_ ( cdsbus2[0], R_Address[0]);
inv_1xT I28_31_ ( cdsbus3[31], WData[31]);
inv_1xT I28_30_ ( cdsbus3[30], WData[30]);
inv_1xT I28_29_ ( cdsbus3[29], WData[29]);
inv_1xT I28_28_ ( cdsbus3[28], WData[28]);
inv_1xT I28_27_ ( cdsbus3[27], WData[27]);
inv_1xT I28_26_ ( cdsbus3[26], WData[26]);
inv_1xT I28_25_ ( cdsbus3[25], WData[25]);
inv_1xT I28_24_ ( cdsbus3[24], WData[24]);
inv_1xT I28_23_ ( cdsbus3[23], WData[23]);
inv_1xT I28_22_ ( cdsbus3[22], WData[22]);
inv_1xT I28_21_ ( cdsbus3[21], WData[21]);
inv_1xT I28_20_ ( cdsbus3[20], WData[20]);
inv_1xT I28_19_ ( cdsbus3[19], WData[19]);
inv_1xT I28_18_ ( cdsbus3[18], WData[18]);
inv_1xT I28_17_ ( cdsbus3[17], WData[17]);
inv_1xT I28_16_ ( cdsbus3[16], WData[16]);
inv_1xT I28_15_ ( cdsbus3[15], WData[15]);
inv_1xT I28_14_ ( cdsbus3[14], WData[14]);
inv_1xT I28_13_ ( cdsbus3[13], WData[13]);
inv_1xT I28_12_ ( cdsbus3[12], WData[12]);
inv_1xT I28_11_ ( cdsbus3[11], WData[11]);
inv_1xT I28_10_ ( cdsbus3[10], WData[10]);
inv_1xT I28_9_ ( cdsbus3[9], WData[9]);
inv_1xT I28_8_ ( cdsbus3[8], WData[8]);
inv_1xT I28_7_ ( cdsbus3[7], WData[7]);
inv_1xT I28_6_ ( cdsbus3[6], WData[6]);
inv_1xT I28_5_ ( cdsbus3[5], WData[5]);
inv_1xT I28_4_ ( cdsbus3[4], WData[4]);
inv_1xT I28_3_ ( cdsbus3[3], WData[3]);
inv_1xT I28_2_ ( cdsbus3[2], WData[2]);
inv_1xT I28_1_ ( cdsbus3[1], WData[1]);
inv_1xT I28_0_ ( cdsbus3[0], WData[0]);
inv_1xT I25_15_ ( WDataAck[15], cdsbus1[15]);
inv_1xT I25_14_ ( WDataAck[14], cdsbus1[14]);
inv_1xT I25_13_ ( WDataAck[13], cdsbus1[13]);
inv_1xT I25_12_ ( WDataAck[12], cdsbus1[12]);
inv_1xT I25_11_ ( WDataAck[11], cdsbus1[11]);
inv_1xT I25_10_ ( WDataAck[10], cdsbus1[10]);
inv_1xT I25_9_ ( WDataAck[9], cdsbus1[9]);
inv_1xT I25_8_ ( WDataAck[8], cdsbus1[8]);
inv_1xT I25_7_ ( WDataAck[7], cdsbus1[7]);
inv_1xT I25_6_ ( WDataAck[6], cdsbus1[6]);
inv_1xT I25_5_ ( WDataAck[5], cdsbus1[5]);
inv_1xT I25_4_ ( WDataAck[4], cdsbus1[4]);
inv_1xT I25_3_ ( WDataAck[3], cdsbus1[3]);
inv_1xT I25_2_ ( WDataAck[2], cdsbus1[2]);
inv_1xT I25_1_ ( WDataAck[1], cdsbus1[1]);
inv_1xT I25_0_ ( WDataAck[0], cdsbus1[0]);

endmodule
