
`timescale 1ps / 1ps

module test;


wire  ReadAck, WriteAck;


wire [4:0]  W_AddresAck;
wire [4:0]  R_AddressAck;
wire [1:0]  WdataAck;
wire [7:0]  RData;

reg [1:0]  RRW;
reg [1:0]  RdataAck;
reg [7:0]  WData;
reg [1:0]  WRW;
reg [19:0]  R_Address;
reg [19:0]  W_Address;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_195 top(RData, R_AddressAck, ReadAck, W_AddresAck, WdataAck, 
     WriteAck, RRW, R_Address, RdataAck, WData, WRW, W_Address); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 

// Vermix stimulus file.
// Default verimix stimulus. 


integer rLog;
integer wLog;
integer seed;
integer i;
integer start;
integer readCount;
integer readOrWrite;
reg[19:0] lastWriteAddr;
reg[7:0] logAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;

initial
begin 

   seed = 5;
   start = 0;
   readCount=0;
   readOrWrite=1;
   rLog=$fopen("/tmp2/dataRLog.csv");

   wLog=$fopen("/tmp2/dataWLog.csv"); 

   W_Address[19:0] = 20'h00000;
   R_Address[19:0] = 20'h00000;
   RdataAck[1:0] = 2'b00;
   WData[7:0] = 8'h00;
   WRW[1:0] = 2'b00;
   RRW[1:0] = 2'b00;

#600;

   W_Address[19:0] 		= 20'h11111;
   WData[7:0] 			= 8'h11;
   WRW[1:0] 			= 2'b01;
   wStart				= $time;
   start 				= 1;

end 


always @(posedge WriteAck) begin
	if (start==1) begin
   	    	wDelay = $time - wStart;
   	  		$fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WData[7:0], $time, wDelay);
          	lastWriteAddr[19:0] <= W_Address[19:0];
   	  		WData[7:0] 			 = 8'b00000000;
          	W_Address[19:0] 	 = 20'h00000;
          	WRW[1:0]         	 = 2'b00;
       	  	wStart = $time;
		    wait(~WriteAck);

		   	wDelay = $time - wStart;
   	  		$fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WData[7:0], $time, wDelay);
    	  	lastWriteAddr[19:0] <= W_Address[19:0];

   		  	RdataAck[1:0]    = 2'b00;
   	 		RRW[1:0]         = 2'b10;
   	 		R_Address[19:0]  = lastWriteAddr;
	 		rStart           = $time;
   end
 end

always @(posedge ReadAck) begin
	if (start==1) begin
		rDelay = $time - rStart;
	   	$fdisplay(rLog, "%h %h %t %t", R_Address[19:0], RData[7:0], $time, rDelay);   	   
   	   	RdataAck[1:0]    = 2'b11;
   	   	RRW[1:0]         = 2'b00;
   	   	R_Address[19:0]  = 20'h00000;
	   	rStart          = $time;
		
		wait(~ReadAck);
   	  	rDelay = $time - rStart;
	   	$fdisplay(rLog, "%h %h %t %t", R_Address[19:0], RData[7:0], $time, rDelay);   	   
	  	readCount = readCount + 1;
	  	if (readCount == 3) begin
				$finish;
	  	end
   	  	
		WRW[1:0]  	= 2'b01;
      	WData[7:0] 	= 8'h48;
      	wStart 		= $time;

	end
end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_export( test.top.net060[7], "99999"); // /net060<7>
	$vmx_define_import( test.top.mixedNet99998, "99998"); // /~WriteAck
	$vmx_define_export( test.top.net060[3], "99997"); // /net060<3>
	$vmx_define_export( test.top.net44[3], "99996"); // /net44<3>
	$vmx_define_export( test.top.net060[12], "99995"); // /net060<12>
	$vmx_define_export( test.top.net049[8], "99994"); // /net049<8>
	$vmx_define_export( test.top.net060[13], "99993"); // /net060<13>
	$vmx_define_export( test.top.net060[4], "99992"); // /net060<4>
	$vmx_define_export( test.top.cdsbus0[1], "99991"); // /~RRW<1>
	$vmx_define_export( test.top.net060[14], "99990"); // /net060<14>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /net045<3>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /net036<0>
	$vmx_define_export( test.top.net44[6], "99987"); // /net44<6>
	$vmx_define_export( test.top.net060[15], "99986"); // /net060<15>
	$vmx_define_export( test.top.net060[8], "99985"); // /net060<8>
	$vmx_define_export( test.top.cdsbus0[0], "99984"); // /~RRW<0>
	$vmx_define_export( test.top.net060[2], "99983"); // /net060<2>
	$vmx_define_export( test.top.net049[10], "99982"); // /net049<10>
	$vmx_define_export( test.top.net44[1], "99981"); // /net44<1>
	$vmx_define_export( test.top.net049[9], "99980"); // /net049<9>
	$vmx_define_export( test.top.net060[0], "99979"); // /net060<0>
	$vmx_define_export( test.top.net049[14], "99978"); // /net049<14>
	$vmx_define_export( test.top.net049[15], "99977"); // /net049<15>
	$vmx_define_export( test.top.net049[16], "99976"); // /net049<16>
	$vmx_define_export( test.top.net049[17], "99975"); // /net049<17>
	$vmx_define_export( test.top.net049[18], "99974"); // /net049<18>
	$vmx_define_export( test.top.net060[18], "99973"); // /net060<18>
	$vmx_define_export( test.top.net060[10], "99972"); // /net060<10>
	$vmx_define_export( test.top.net060[9], "99971"); // /net060<9>
	$vmx_define_export( test.top.net41[0], "99970"); // /net41<0>
	$vmx_define_export( test.top.net049[0], "99969"); // /net049<0>
	$vmx_define_export( test.top.net049[1], "99968"); // /net049<1>
	$vmx_define_export( test.top.net41[1], "99967"); // /net41<1>
	$vmx_define_export( test.top.net060[19], "99966"); // /net060<19>
	$vmx_define_export( test.top.net049[7], "99965"); // /net049<7>
	$vmx_define_export( test.top.net049[19], "99964"); // /net049<19>
	$vmx_define_import( test.top.mixedNet99963, "99963"); // /net027<7>
	$vmx_define_export( test.top.net049[5], "99962"); // /net049<5>
	$vmx_define_export( test.top.net060[6], "99961"); // /net060<6>
	$vmx_define_export( test.top.net049[2], "99960"); // /net049<2>
	$vmx_define_import( test.top.mixedNet99959, "99959"); // /net045<4>
	$vmx_define_export( test.top.net049[13], "99958"); // /net049<13>
	$vmx_define_export( test.top.net064[1], "99957"); // /net064<1>
	$vmx_define_export( test.top.net060[5], "99956"); // /net060<5>
	$vmx_define_export( test.top.net44[2], "99955"); // /net44<2>
	$vmx_define_import( test.top.mixedNet99954, "99954"); // /net045<1>
	$vmx_define_import( test.top.mixedNet99953, "99953"); // /net045<0>
	$vmx_define_export( test.top.net049[6], "99952"); // /net049<6>
	$vmx_define_import( test.top.mixedNet99951, "99951"); // /net045<2>
	$vmx_define_export( test.top.net060[11], "99950"); // /net060<11>
	$vmx_define_export( test.top.net44[7], "99949"); // /net44<7>
	$vmx_define_import( test.top.mixedNet99948, "99948"); // /net027<2>
	$vmx_define_export( test.top.net060[16], "99947"); // /net060<16>
	$vmx_define_import( test.top.mixedNet99946, "99946"); // /net027<1>
	$vmx_define_import( test.top.mixedNet99945, "99945"); // /~ReadAck
	$vmx_define_import( test.top.mixedNet99944, "99944"); // /net048<0>
	$vmx_define_export( test.top.net049[12], "99943"); // /net049<12>
	$vmx_define_export( test.top.net44[0], "99942"); // /net44<0>
	$vmx_define_import( test.top.mixedNet99941, "99941"); // /net036<1>
	$vmx_define_import( test.top.mixedNet99940, "99940"); // /net027<0>
	$vmx_define_import( test.top.mixedNet99939, "99939"); // /net027<3>
	$vmx_define_export( test.top.net064[0], "99938"); // /net064<0>
	$vmx_define_import( test.top.mixedNet99937, "99937"); // /net027<4>
	$vmx_define_import( test.top.mixedNet99936, "99936"); // /net048<3>
	$vmx_define_export( test.top.net049[4], "99935"); // /net049<4>
	$vmx_define_import( test.top.mixedNet99934, "99934"); // /net027<6>
	$vmx_define_import( test.top.mixedNet99933, "99933"); // /net048<4>
	$vmx_define_import( test.top.mixedNet99932, "99932"); // /net027<5>
	$vmx_define_export( test.top.net049[3], "99931"); // /net049<3>
	$vmx_define_import( test.top.mixedNet99930, "99930"); // /net048<2>
	$vmx_define_export( test.top.net44[4], "99929"); // /net44<4>
	$vmx_define_export( test.top.net049[11], "99928"); // /net049<11>
	$vmx_define_export( test.top.net44[5], "99927"); // /net44<5>
	$vmx_define_import( test.top.mixedNet99926, "99926"); // /net048<1>
	$vmx_define_export( test.top.net060[1], "99925"); // /net060<1>
	$vmx_define_export( test.top.net060[17], "99924"); // /net060<17>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.R_Address[9], test.top.WriteAck, test.top.W_Address[13], test.top.R_Address[11], test.top.WRW[1], test.top.WRW[0], test.top.R_AddressAck[3], test.top.W_AddresAck[3], test.top.RRW[1], test.top.W_Address[2], test.top.R_AddressAck[1], test.top.RdataAck[1], test.top.WData[5], test.top.R_Address[13], test.top.RData[6], test.top.RData[5], test.top.RData[1], test.top.RData[0], test.top.WdataAck[1], test.top.RData[7], test.top.WData[0], test.top.R_Address[6], test.top.WData[3], test.top.W_Address[19], test.top.R_AddressAck[4], test.top.W_Address[15], test.top.W_Address[18], test.top.W_Address[10], test.top.W_Address[9], test.top.W_Address[14], test.top.W_Address[17], test.top.W_Address[8], test.top.W_Address[5], test.top.WData[7], test.top.W_Address[4], test.top.W_Address[7], test.top.WData[2], test.top.W_Address[12], test.top.W_Address[16], test.top.WData[1], test.top.W_AddresAck[0], test.top.W_Address[11], test.top.W_Address[3], test.top.WData[6], test.top.RData[2], test.top.R_Address[19], 
test.top.W_Address[6], test.top.ReadAck, test.top.R_Address[2], test.top.W_Address[1], test.top.W_AddresAck[4], test.top.R_Address[10], test.top.RdataAck[0], test.top.WdataAck[0], test.top.W_AddresAck[1], test.top.W_AddresAck[2], test.top.R_Address[17], test.top.W_Address[0], test.top.R_Address[3], test.top.R_Address[16], test.top.WData[4], test.top.R_Address[15], test.top.RData[4], test.top.R_Address[14], test.top.R_Address[12], test.top.R_Address[18], test.top.R_Address[5], test.top.R_Address[7], test.top.R_AddressAck[0], test.top.R_Address[4], test.top.RRW[0], test.top.R_AddressAck[2], test.top.R_Address[1], test.top.R_Address[0], test.top.R_Address[8], test.top.RData[3], test.top.WData[7:0], test.top.W_Address[19:0], test.top.WRW[1:0], test.top.RData[7:0], test.top.WdataAck[1:0], test.top.R_AddressAck[4:0], test.top.R_Address[19:0], test.top.RRW[1:0], test.top.RdataAck[1:0], test.top.W_AddresAck[4:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_DataPath_Test, View - schematic
// LAST TIME SAVED: Apr 24 09:46:22 2015
// NETLIST TIME: Apr 24 12:25:13 2015
`timescale 1ps / 1ps 

module cdsModule_195 ( RData, R_AddressAck, ReadAck, W_AddresAck,
     WdataAck, WriteAck, RRW, R_Address, RdataAck, WData, WRW,
     W_Address );

output  ReadAck, WriteAck;


output [4:0]  W_AddresAck;
output [4:0]  R_AddressAck;
output [1:0]  WdataAck;
output [7:0]  RData;

input [1:0]  RRW;
input [1:0]  RdataAck;
input [7:0]  WData;
input [1:0]  WRW;
input [19:0]  R_Address;
input [19:0]  W_Address;

// Buses in the design

wire  [0:19]  net060;

wire  [1:0]  RW;

wire  [0:4]  net055;

wire  [7:0]  S;

wire  [0:1]  net41;

wire  [1:0]  cdsbus0;

wire  [63:0]  Aline;

wire  [3:0]  B0_1;

wire  [1:0]  RdataAckT;

wire  [3:0]  cdsbus1;

wire  [19:0]  W_AddressT;

wire  [3:0]  W1_1;

wire  [0:19]  net049;

wire  [0:1]  net036;

wire  [19:0]  R_AddressT;

wire  [5:0]  Acko;

wire  [3:0]  W0_1;

wire  [3:0]  B1_1;

wire  [3:0]  cdsbus2;

wire  [7:0]  WDataT;

wire  [1:0]  WdataAckT;

wire  [0:4]  net048;

wire  [1:0]  WRWT;

wire  [0:7]  net44;

wire  [0:4]  net045;

wire  [0:1]  net064;

wire  [0:7]  net027;

wire  [4:0]  W_Address_AckT;

wire  [19:0]  AT;

wire  [7:0]  RDataT;

wire  [0:1]  net046;

// begin interface element definitions

wire cdsNet1;
wire cdsNet0;
reg mixedNet99998;
reg mixedNet99989;
reg mixedNet99988;
reg mixedNet99963;
reg mixedNet99959;
reg mixedNet99954;
reg mixedNet99953;
reg mixedNet99951;
reg mixedNet99948;
reg mixedNet99946;
reg mixedNet99945;
reg mixedNet99944;
reg mixedNet99941;
reg mixedNet99940;
reg mixedNet99939;
reg mixedNet99937;
reg mixedNet99936;
reg mixedNet99934;
reg mixedNet99933;
reg mixedNet99932;
reg mixedNet99930;
reg mixedNet99926;
assign cdsNet1 = mixedNet99998;
assign net045[3] = mixedNet99989;
assign net036[0] = mixedNet99988;
assign net027[7] = mixedNet99963;
assign net045[4] = mixedNet99959;
assign net045[1] = mixedNet99954;
assign net045[0] = mixedNet99953;
assign net045[2] = mixedNet99951;
assign net027[2] = mixedNet99948;
assign net027[1] = mixedNet99946;
assign cdsNet0 = mixedNet99945;
assign net048[0] = mixedNet99944;
assign net036[1] = mixedNet99941;
assign net027[0] = mixedNet99940;
assign net027[3] = mixedNet99939;
assign net027[4] = mixedNet99937;
assign net048[3] = mixedNet99936;
assign net027[6] = mixedNet99934;
assign net048[4] = mixedNet99933;
assign net027[5] = mixedNet99932;
assign net048[2] = mixedNet99930;
assign net048[1] = mixedNet99926;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_DataPath_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I28_19_ ( net060[0], R_Address[19]);
inv_1xT I28_18_ ( net060[1], R_Address[18]);
inv_1xT I28_17_ ( net060[2], R_Address[17]);
inv_1xT I28_16_ ( net060[3], R_Address[16]);
inv_1xT I28_15_ ( net060[4], R_Address[15]);
inv_1xT I28_14_ ( net060[5], R_Address[14]);
inv_1xT I28_13_ ( net060[6], R_Address[13]);
inv_1xT I28_12_ ( net060[7], R_Address[12]);
inv_1xT I28_11_ ( net060[8], R_Address[11]);
inv_1xT I28_10_ ( net060[9], R_Address[10]);
inv_1xT I28_9_ ( net060[10], R_Address[9]);
inv_1xT I28_8_ ( net060[11], R_Address[8]);
inv_1xT I28_7_ ( net060[12], R_Address[7]);
inv_1xT I28_6_ ( net060[13], R_Address[6]);
inv_1xT I28_5_ ( net060[14], R_Address[5]);
inv_1xT I28_4_ ( net060[15], R_Address[4]);
inv_1xT I28_3_ ( net060[16], R_Address[3]);
inv_1xT I28_2_ ( net060[17], R_Address[2]);
inv_1xT I28_1_ ( net060[18], R_Address[1]);
inv_1xT I28_0_ ( net060[19], R_Address[0]);
inv_1xT I24_4_ ( R_AddressAck[4], net045[0]);
inv_1xT I24_3_ ( R_AddressAck[3], net045[1]);
inv_1xT I24_2_ ( R_AddressAck[2], net045[2]);
inv_1xT I24_1_ ( R_AddressAck[1], net045[3]);
inv_1xT I24_0_ ( R_AddressAck[0], net045[4]);
inv_1xT I27_1_ ( cdsbus0[1], RRW[1]);
inv_1xT I27_0_ ( cdsbus0[0], RRW[0]);
inv_1xT I50 ( ReadAck, cdsNet0);
inv_1xT I49 ( WriteAck, cdsNet1);
inv_1xT I26_1_ ( net064[0], WRW[1]);
inv_1xT I26_0_ ( net064[1], WRW[0]);
inv_1xT I21_4_ ( W_AddresAck[4], net048[0]);
inv_1xT I21_3_ ( W_AddresAck[3], net048[1]);
inv_1xT I21_2_ ( W_AddresAck[2], net048[2]);
inv_1xT I21_1_ ( W_AddresAck[1], net048[3]);
inv_1xT I21_0_ ( W_AddresAck[0], net048[4]);
inv_1xT I8_1_ ( WdataAck[1], net036[0]);
inv_1xT I8_0_ ( WdataAck[0], net036[1]);
inv_1xT I25_19_ ( net049[0], W_Address[19]);
inv_1xT I25_18_ ( net049[1], W_Address[18]);
inv_1xT I25_17_ ( net049[2], W_Address[17]);
inv_1xT I25_16_ ( net049[3], W_Address[16]);
inv_1xT I25_15_ ( net049[4], W_Address[15]);
inv_1xT I25_14_ ( net049[5], W_Address[14]);
inv_1xT I25_13_ ( net049[6], W_Address[13]);
inv_1xT I25_12_ ( net049[7], W_Address[12]);
inv_1xT I25_11_ ( net049[8], W_Address[11]);
inv_1xT I25_10_ ( net049[9], W_Address[10]);
inv_1xT I25_9_ ( net049[10], W_Address[9]);
inv_1xT I25_8_ ( net049[11], W_Address[8]);
inv_1xT I25_7_ ( net049[12], W_Address[7]);
inv_1xT I25_6_ ( net049[13], W_Address[6]);
inv_1xT I25_5_ ( net049[14], W_Address[5]);
inv_1xT I25_4_ ( net049[15], W_Address[4]);
inv_1xT I25_3_ ( net049[16], W_Address[3]);
inv_1xT I25_2_ ( net049[17], W_Address[2]);
inv_1xT I25_1_ ( net049[18], W_Address[1]);
inv_1xT I25_0_ ( net049[19], W_Address[0]);
inv_1xT I12_1_ ( net41[0], RdataAck[1]);
inv_1xT I12_0_ ( net41[1], RdataAck[0]);
inv_1xT I10_7_ ( RData[7], net027[0]);
inv_1xT I10_6_ ( RData[6], net027[1]);
inv_1xT I10_5_ ( RData[5], net027[2]);
inv_1xT I10_4_ ( RData[4], net027[3]);
inv_1xT I10_3_ ( RData[3], net027[4]);
inv_1xT I10_2_ ( RData[2], net027[5]);
inv_1xT I10_1_ ( RData[1], net027[6]);
inv_1xT I10_0_ ( RData[0], net027[7]);
inv_1xT I4_7_ ( net44[0], WData[7]);
inv_1xT I4_6_ ( net44[1], WData[6]);
inv_1xT I4_5_ ( net44[2], WData[5]);
inv_1xT I4_4_ ( net44[3], WData[4]);
inv_1xT I4_3_ ( net44[4], WData[3]);
inv_1xT I4_2_ ( net44[5], WData[2]);
inv_1xT I4_1_ ( net44[6], WData[1]);
inv_1xT I4_0_ ( net44[7], WData[0]);

endmodule
