
// Vermix stimulus file.
// Default verimix stimulus. 


integer rLog;
integer wLog;
integer seed;
integer i;
integer start;
integer readCount;
integer readOrWrite;
reg[19:0] lastWriteAddr;
reg[7:0] logAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;

initial
begin 

   seed = 5;
   start = 0;
   readCount=0;
   readOrWrite=1;
   rLog=$fopen("/tmp2/dataRLog.csv");

   wLog=$fopen("/tmp2/dataWLog.csv"); 

   W_Address[19:0] = 20'h00000;
   R_Address[19:0] = 20'h00000;
   RdataAck[1:0] = 2'b00;
   WData[7:0] = 8'h00;
   WRW[1:0] = 2'b00;
   RRW[1:0] = 2'b00;

#500;

   W_Address[19:0] 		= 20'h11111;
   WData[7:0] 			= 8'h11;
   WRW[1:0] 			= 2'b01;
   wStart				= $time;
//   start 				= 1;
wait(WriteAck);

   WData[7:0] 			= 8'b00000000;
   W_Address[19:0] 	 	= 20'h0000;
   WRW[1:0]         	= 2'b00;
wait(~WriteAck);

   W_Address[19:0] 		= 20'h11111;
   WData[7:0] 			= 8'h88;
   WRW[1:0] 			= 2'b01;
wait(WriteAck);

   WData[7:0] 			= 8'b00000000;
   W_Address[19:0] 	 	= 20'h0000;
   WRW[1:0]         	= 2'b00;
wait(~WriteAck);

   R_Address[19:0] 		= 20'h11111;
   RdataAck[1:0] 		= 2'b00;
   RRW[1:0] 			= 2'b10;
wait(ReadAck);

   R_Address[19:0] 		= 20'h00000;
   RdataAck[1:0] 		= 2'b11;
   RRW[1:0] 			= 2'b00;
wait(ReadAck);
	$finish;
end 


always @(negedge WriteAck) begin
	if (start==1) begin
   	    	wDelay = $time - wStart;
   	  		$fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WData[7:0], $time, wDelay);
          	lastWriteAddr[19:0] <= W_Address[19:0];
   	  		WData[7:0] 			 = 8'b00000000;
          	W_Address[19:0] 	 = 20'h0000;
          	WRW[1:0]         	 = 2'b00;
       	  	wStart = $time;
   end
 end

always @(negedge ReadAck) begin
	if (start==1) begin
		rDelay = $time - rStart;
	   	$fdisplay(rLog, "%h %h %t %t", R_Address[19:0], RData[7:0], $time, rDelay);   	   
   	   	RdataAck[1:0]    = 2'b00;
   	   	RRW[1:0]         = 2'b00;
   	   	R_Address[19:0]  = 20'h00000;
	   	rStart          = $time;
	end
end


always @(posedge ReadAck) begin
	if (start==1) begin
   	  		rDelay = $time - rStart;
	   		$fdisplay(rLog, "%h %h %t %t", R_Address[19:0], RData[7:0], $time, rDelay);   	   
	  		readCount = readCount + 1;
	  		if (readCount == 1) begin
				$finish;
	  		end
//   	  		logAddr[7:0] = $random;
//	 		W_Address[0]   = ~logAddr[0] & ~logAddr[1];
//	  		W_Address[1]   =  logAddr[0] & ~logAddr[1];
//	  		W_Address[2]   = ~logAddr[0] &  logAddr[1];
//     		W_Address[3]   =  logAddr[0] &  logAddr[1];
//	  		W_Address[4]   = ~logAddr[2] & ~logAddr[3];
//	  		W_Address[5]   =  logAddr[2] & ~logAddr[3];
//	  		W_Address[6]   = ~logAddr[2] &  logAddr[3];
//     		W_Address[7]   =  logAddr[2] &  logAddr[3];
//			W_Address[8]   = ~logAddr[4] & ~logAddr[5];
//	  		W_Address[9]   =  logAddr[4] & ~logAddr[5];
//	  		W_Address[10]  = ~logAddr[4] &  logAddr[5];
//      	W_Address[11]  =  logAddr[4] &  logAddr[5];
//	  		W_Address[12]  = ~logAddr[6] & ~logAddr[7];
//	  		W_Address[13]  =  logAddr[6] & ~logAddr[7];
//	  		W_Address[14]  = ~logAddr[6] &  logAddr[7];
//     		W_Address[15]  =  logAddr[6] &  logAddr[7];
//			W_Address[16]  = 1'b1;
			W_Address[19:0] = 20'h11111;

   	  		WRW[1:0]  	= 2'b01;
      		WData[7:0] 	= 8'h48;
      		wStart 		= $time;
   end
 end

always @(posedge WriteAck) begin
	if (start==1) begin
		   	wDelay = $time - wStart;
   	  		$fdisplay(wLog, "%h %h %t %t", W_Address[19:0], WData[7:0], $time, wDelay);
    	  	lastWriteAddr[19:0] <= W_Address[19:0];
   		  	RdataAck[1:0]    = 2'b11;
   	 		RRW[1:0]         = 2'b10;
   	 		R_Address[19:0]  = lastWriteAddr;
	 		rStart           = $time;
	end
end
