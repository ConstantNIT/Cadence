
`timescale 1ps / 1ps

module test;


wire  ReadAck, WriteAck;

reg  ReadEn, WriteEn;

wire [15:0]  RData;
wire [7:0]  WDataAck;

reg [15:0]  Data1;
reg [11:0]  W_Address;
reg [11:0]  R_Address;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_137 top(RData, ReadAck, WDataAck, WriteAck, Data1, R_Address
     , ReadEn, W_Address, WriteEn); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 

// Vermix stimulus file.
// Default verimix stimulus. 

integer rLog;
integer wLog;
integer seed;
integer i;
integer start;
reg[11:0] lastWriteAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;


initial
begin 

   seed = 5;
   start = 0;
   rLog=$fopen("/tmp2/8k_RLog.csv");
   $fdisplay(rLog, "R_Address, RData[15:0], total_time(ps), read_delay(ps)");

   wLog=$fopen("/tmp2/8K_WLog.csv"); 
   $fdisplay(wLog, "W_Address, Data1[15:0], , total_time(ps), write_delay(ps)");

   Data1[15:0]     = 16'b0000000000000000;
   W_Address[11:0] = 12'b000000000000;
   R_Address[11:0] = 12'b000000000000;
   ReadEn          = 1'b0;
   WriteEn         = 1'b0;
   lastWriteAddr[11:0] = 12'hFFF;
   #1000;
   R_Address[11:0] = lastWriteAddr[11:0];
   ReadEn          = 1'b1;
   wait(ReadAck);

   ReadEn = 1'b0;
   R_Address[11:0] = 12'h000;
   wait(~ReadAck);

   WriteEn         = 1'b1;
   Data1[15:0]     = $random;
   W_Address[11:0] = 12'h000;
   wait(WriteAck);

   WriteEn = 1'b0;
   Data1[15:0] = 16'h0000;
   wait(~WriteAck);

   start=1;
   Data1[15:0] = $random;
   W_Address[11:0] = 12'h000;
   R_Address[11:0] = lastWriteAddr[11:0];
   ReadEn =  1'b1;
   WriteEn = 1'b1;

end 


always @(posedge WriteAck) begin
   if (start==1) begin
   	  wDelay = $time - wStart;
   	  $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], Data1[15:0], $time, wDelay);
          lastWriteAddr[11:0] <= W_Address[11:0];
   	  Data1[15:0] = 16'h0000;
   	  WriteEn  = 1'b0;  
          wStart   = $time;
   end
end

always @(negedge WriteAck) begin
   if (start==1) begin
   	   wDelay = $time - wStart;
   	   $fdisplay(wLog, "%h, %h, %t, %t", W_Address[11:0], Data1[15:0], $time, wDelay);   	   
           Data1[15:0]     = $random;
   	   W_Address[11:0] = $random;
           WriteEn   = 1'b1;  
	   wStart    = $time;
   end
end

always @(negedge ReadAck) begin
   if (start==1) begin
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[15:0], $time, rDelay);   	   
   	   R_Address[11:0] = lastWriteAddr[11:0];
           if (R_Address[11:9] == W_Address[11:9]) begin
	       R_Address[11:9] = ~R_Address[11:9];
           end
           ReadEn      = 1'b1;
	   rStart      = $time;
   end
end

always @(posedge ReadAck) begin
   if (start==1) begin
   	   rDelay = $time - rStart;
   	   $fdisplay(rLog, "%h, %h, %t, %t", R_Address[11:0], RData[15:0], $time, rDelay);   	   
           ReadEn         = 1'b0; 
           R_Address[11:0] = 12'h000;
	   rStart        = $time;
   end
end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /~RAck
	$vmx_define_export( test.top.cdsNet1, "99998"); // /~WriteEn
	$vmx_define_import( test.top.mixedNet99997, "99997"); // /~WDataAck<0>
	$vmx_define_import( test.top.mixedNet99996, "99996"); // /~WDataAck<5>
	$vmx_define_import( test.top.mixedNet99995, "99995"); // /~WDataAck<6>
	$vmx_define_import( test.top.mixedNet99994, "99994"); // /~WDataAck<7>
	$vmx_define_import( test.top.mixedNet99993, "99993"); // /~WAck
	$vmx_define_import( test.top.mixedNet99992, "99992"); // /~WDataAck<4>
	$vmx_define_import( test.top.mixedNet99991, "99991"); // /~WDataAck<3>
	$vmx_define_import( test.top.mixedNet99990, "99990"); // /~WDataAck<2>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /~WDataAck<1>
	$vmx_define_export( test.top.cdsbus1[7], "99988"); // /~W_Address<7>
	$vmx_define_export( test.top.cdsbus1[6], "99987"); // /~W_Address<6>
	$vmx_define_export( test.top.cdsbus1[9], "99986"); // /~W_Address<9>
	$vmx_define_export( test.top.cdsbus1[8], "99985"); // /~W_Address<8>
	$vmx_define_export( test.top.cdsbus1[2], "99984"); // /~W_Address<2>
	$vmx_define_export( test.top.cdsbus1[3], "99983"); // /~W_Address<3>
	$vmx_define_export( test.top.cdsbus1[4], "99982"); // /~W_Address<4>
	$vmx_define_export( test.top.cdsbus1[5], "99981"); // /~W_Address<5>
	$vmx_define_export( test.top.cdsNet3, "99980"); // /~ReadEn
	$vmx_define_export( test.top.cdsbus1[10], "99979"); // /~W_Address<10>
	$vmx_define_export( test.top.cdsbus1[11], "99978"); // /~W_Address<11>
	$vmx_define_export( test.top.cdsbus1[0], "99977"); // /~W_Address<0>
	$vmx_define_export( test.top.cdsbus1[1], "99976"); // /~W_Address<1>
	$vmx_define_import( test.top.mixedNet99975, "99975"); // /~RData<12>
	$vmx_define_import( test.top.mixedNet99974, "99974"); // /~RData<13>
	$vmx_define_import( test.top.mixedNet99973, "99973"); // /~RData<14>
	$vmx_define_import( test.top.mixedNet99972, "99972"); // /~RData<15>
	$vmx_define_import( test.top.mixedNet99971, "99971"); // /~RData<0>
	$vmx_define_import( test.top.mixedNet99970, "99970"); // /~RData<1>
	$vmx_define_import( test.top.mixedNet99969, "99969"); // /~RData<2>
	$vmx_define_import( test.top.mixedNet99968, "99968"); // /~RData<3>
	$vmx_define_import( test.top.mixedNet99967, "99967"); // /~RData<11>
	$vmx_define_export( test.top.cdsbus3[9], "99966"); // /~R_Address<9>
	$vmx_define_export( test.top.cdsbus3[10], "99965"); // /~R_Address<10>
	$vmx_define_export( test.top.cdsbus3[11], "99964"); // /~R_Address<11>
	$vmx_define_export( test.top.cdsbus4[0], "99963"); // /~WData<0>
	$vmx_define_export( test.top.cdsbus4[1], "99962"); // /~WData<1>
	$vmx_define_export( test.top.cdsbus4[2], "99961"); // /~WData<2>
	$vmx_define_export( test.top.cdsbus4[3], "99960"); // /~WData<3>
	$vmx_define_export( test.top.cdsbus4[4], "99959"); // /~WData<4>
	$vmx_define_export( test.top.cdsbus4[5], "99958"); // /~WData<5>
	$vmx_define_export( test.top.cdsbus4[6], "99957"); // /~WData<6>
	$vmx_define_export( test.top.cdsbus4[7], "99956"); // /~WData<7>
	$vmx_define_export( test.top.cdsbus4[8], "99955"); // /~WData<8>
	$vmx_define_export( test.top.cdsbus4[9], "99954"); // /~WData<9>
	$vmx_define_export( test.top.cdsbus4[10], "99953"); // /~WData<10>
	$vmx_define_import( test.top.mixedNet99952, "99952"); // /~RData<4>
	$vmx_define_import( test.top.mixedNet99951, "99951"); // /~RData<5>
	$vmx_define_import( test.top.mixedNet99950, "99950"); // /~RData<6>
	$vmx_define_import( test.top.mixedNet99949, "99949"); // /~RData<7>
	$vmx_define_export( test.top.cdsbus4[15], "99948"); // /~WData<15>
	$vmx_define_export( test.top.cdsbus4[14], "99947"); // /~WData<14>
	$vmx_define_export( test.top.cdsbus4[13], "99946"); // /~WData<13>
	$vmx_define_export( test.top.cdsbus4[12], "99945"); // /~WData<12>
	$vmx_define_export( test.top.cdsbus4[11], "99944"); // /~WData<11>
	$vmx_define_export( test.top.cdsbus3[3], "99943"); // /~R_Address<3>
	$vmx_define_export( test.top.cdsbus3[4], "99942"); // /~R_Address<4>
	$vmx_define_export( test.top.cdsbus3[5], "99941"); // /~R_Address<5>
	$vmx_define_export( test.top.cdsbus3[6], "99940"); // /~R_Address<6>
	$vmx_define_export( test.top.cdsbus3[7], "99939"); // /~R_Address<7>
	$vmx_define_export( test.top.cdsbus3[8], "99938"); // /~R_Address<8>
	$vmx_define_import( test.top.mixedNet99937, "99937"); // /~RData<8>
	$vmx_define_import( test.top.mixedNet99936, "99936"); // /~RData<9>
	$vmx_define_import( test.top.mixedNet99935, "99935"); // /~RData<10>
	$vmx_define_export( test.top.cdsbus3[2], "99934"); // /~R_Address<2>
	$vmx_define_export( test.top.cdsbus3[1], "99933"); // /~R_Address<1>
	$vmx_define_export( test.top.cdsbus3[0], "99932"); // /~R_Address<0>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.WriteEn, test.top.RData[10], test.top.ReadEn, test.top.RData[9], test.top.RData[13], test.top.RData[15], test.top.RData[11], test.top.RData[8], test.top.RData[7], test.top.RData[2], test.top.RData[14], test.top.RData[12], test.top.RData[1], test.top.RData[0], test.top.RData[3], test.top.RData[4], test.top.RData[5], test.top.RData[6], test.top.WriteAck, test.top.W_Address[0], test.top.W_Address[1], test.top.W_Address[2], test.top.W_Address[3], test.top.W_Address[4], test.top.W_Address[5], test.top.W_Address[6], test.top.W_Address[7], test.top.W_Address[8], test.top.W_Address[9], test.top.W_Address[10], test.top.W_Address[11], test.top.R_Address[0], test.top.R_Address[1], test.top.R_Address[2], test.top.R_Address[3], test.top.R_Address[4], test.top.R_Address[5], test.top.R_Address[6], test.top.R_Address[7], test.top.R_Address[8], test.top.R_Address[9], test.top.R_Address[10], test.top.R_Address[11], test.top.Data1[0], test.top.Data1[1], test.top.Data1[2], test.top.Data1[3], test.top.Data1[4], 
test.top.Data1[5], test.top.Data1[6], test.top.Data1[7], test.top.Data1[8], test.top.Data1[9], test.top.Data1[10], test.top.Data1[11], test.top.Data1[12], test.top.Data1[13], test.top.Data1[14], test.top.Data1[15], test.top.ReadAck, test.top.WDataAck[0], test.top.WDataAck[1], test.top.WDataAck[2], test.top.WDataAck[3], test.top.WDataAck[4], test.top.WDataAck[5], test.top.WDataAck[6], test.top.WDataAck[7], test.top.R_Address[11:0], test.top.Data1[15:0], test.top.WDataAck[7:0], test.top.W_Address[11:0], test.top.RData[15:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_8K_MultiBank_Test, View - schematic
// LAST TIME SAVED: Mar  6 06:07:08 2015
// NETLIST TIME: Mar  7 04:47:25 2015
`timescale 1ps / 1ps 

module cdsModule_137 ( RData, ReadAck, WDataAck, WriteAck, Data1,
     R_Address, ReadEn, W_Address, WriteEn );

output  ReadAck, WriteAck;

input  ReadEn, WriteEn;

output [15:0]  RData;
output [7:0]  WDataAck;

input [15:0]  Data1;
input [11:0]  W_Address;
input [11:0]  R_Address;

// Buses in the design

wire  [7:0]  cdsbus0;

wire  [15:0]  RDataT;

wire  [11:0]  cdsbus1;

wire  [7:0]  WDataAckT;

wire  [11:0]  R_AddressT;

wire  [15:0]  cdsbus2;

wire  [11:0]  W_AddressT;

wire  [11:0]  cdsbus3;

wire  [15:0]  cdsbus4;

wire  [15:0]  WDataT;

// begin interface element definitions

wire cdsNet0;
wire cdsNet2;
reg mixedNet99999;
reg mixedNet99997;
reg mixedNet99996;
reg mixedNet99995;
reg mixedNet99994;
reg mixedNet99993;
reg mixedNet99992;
reg mixedNet99991;
reg mixedNet99990;
reg mixedNet99989;
reg mixedNet99975;
reg mixedNet99974;
reg mixedNet99973;
reg mixedNet99972;
reg mixedNet99971;
reg mixedNet99970;
reg mixedNet99969;
reg mixedNet99968;
reg mixedNet99967;
reg mixedNet99952;
reg mixedNet99951;
reg mixedNet99950;
reg mixedNet99949;
reg mixedNet99937;
reg mixedNet99936;
reg mixedNet99935;
assign cdsNet0 = mixedNet99999;
assign cdsbus0[0] = mixedNet99997;
assign cdsbus0[5] = mixedNet99996;
assign cdsbus0[6] = mixedNet99995;
assign cdsbus0[7] = mixedNet99994;
assign cdsNet2 = mixedNet99993;
assign cdsbus0[4] = mixedNet99992;
assign cdsbus0[3] = mixedNet99991;
assign cdsbus0[2] = mixedNet99990;
assign cdsbus0[1] = mixedNet99989;
assign cdsbus2[12] = mixedNet99975;
assign cdsbus2[13] = mixedNet99974;
assign cdsbus2[14] = mixedNet99973;
assign cdsbus2[15] = mixedNet99972;
assign cdsbus2[0] = mixedNet99971;
assign cdsbus2[1] = mixedNet99970;
assign cdsbus2[2] = mixedNet99969;
assign cdsbus2[3] = mixedNet99968;
assign cdsbus2[11] = mixedNet99967;
assign cdsbus2[4] = mixedNet99952;
assign cdsbus2[5] = mixedNet99951;
assign cdsbus2[6] = mixedNet99950;
assign cdsbus2[7] = mixedNet99949;
assign cdsbus2[8] = mixedNet99937;
assign cdsbus2[9] = mixedNet99936;
assign cdsbus2[10] = mixedNet99935;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_8K_MultiBank_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I12 ( ReadAck, cdsNet0);
inv_1xT I16 ( cdsNet1, WriteEn);
inv_1xT I8_15_ ( RData[15], cdsbus2[15]);
inv_1xT I8_14_ ( RData[14], cdsbus2[14]);
inv_1xT I8_13_ ( RData[13], cdsbus2[13]);
inv_1xT I8_12_ ( RData[12], cdsbus2[12]);
inv_1xT I8_11_ ( RData[11], cdsbus2[11]);
inv_1xT I8_10_ ( RData[10], cdsbus2[10]);
inv_1xT I8_9_ ( RData[9], cdsbus2[9]);
inv_1xT I8_8_ ( RData[8], cdsbus2[8]);
inv_1xT I8_7_ ( RData[7], cdsbus2[7]);
inv_1xT I8_6_ ( RData[6], cdsbus2[6]);
inv_1xT I8_5_ ( RData[5], cdsbus2[5]);
inv_1xT I8_4_ ( RData[4], cdsbus2[4]);
inv_1xT I8_3_ ( RData[3], cdsbus2[3]);
inv_1xT I8_2_ ( RData[2], cdsbus2[2]);
inv_1xT I8_1_ ( RData[1], cdsbus2[1]);
inv_1xT I8_0_ ( RData[0], cdsbus2[0]);
inv_1xT I15 ( WriteAck, cdsNet2);
inv_1xT I10 ( cdsNet3, ReadEn);
inv_1xT I7_11_ ( cdsbus1[11], W_Address[11]);
inv_1xT I7_10_ ( cdsbus1[10], W_Address[10]);
inv_1xT I7_9_ ( cdsbus1[9], W_Address[9]);
inv_1xT I7_8_ ( cdsbus1[8], W_Address[8]);
inv_1xT I7_7_ ( cdsbus1[7], W_Address[7]);
inv_1xT I7_6_ ( cdsbus1[6], W_Address[6]);
inv_1xT I7_5_ ( cdsbus1[5], W_Address[5]);
inv_1xT I7_4_ ( cdsbus1[4], W_Address[4]);
inv_1xT I7_3_ ( cdsbus1[3], W_Address[3]);
inv_1xT I7_2_ ( cdsbus1[2], W_Address[2]);
inv_1xT I7_1_ ( cdsbus1[1], W_Address[1]);
inv_1xT I7_0_ ( cdsbus1[0], W_Address[0]);
inv_1xT I2_11_ ( cdsbus3[11], R_Address[11]);
inv_1xT I2_10_ ( cdsbus3[10], R_Address[10]);
inv_1xT I2_9_ ( cdsbus3[9], R_Address[9]);
inv_1xT I2_8_ ( cdsbus3[8], R_Address[8]);
inv_1xT I2_7_ ( cdsbus3[7], R_Address[7]);
inv_1xT I2_6_ ( cdsbus3[6], R_Address[6]);
inv_1xT I2_5_ ( cdsbus3[5], R_Address[5]);
inv_1xT I2_4_ ( cdsbus3[4], R_Address[4]);
inv_1xT I2_3_ ( cdsbus3[3], R_Address[3]);
inv_1xT I2_2_ ( cdsbus3[2], R_Address[2]);
inv_1xT I2_1_ ( cdsbus3[1], R_Address[1]);
inv_1xT I2_0_ ( cdsbus3[0], R_Address[0]);
inv_1xT I28_15_ ( cdsbus4[15], Data1[15]);
inv_1xT I28_14_ ( cdsbus4[14], Data1[14]);
inv_1xT I28_13_ ( cdsbus4[13], Data1[13]);
inv_1xT I28_12_ ( cdsbus4[12], Data1[12]);
inv_1xT I28_11_ ( cdsbus4[11], Data1[11]);
inv_1xT I28_10_ ( cdsbus4[10], Data1[10]);
inv_1xT I28_9_ ( cdsbus4[9], Data1[9]);
inv_1xT I28_8_ ( cdsbus4[8], Data1[8]);
inv_1xT I28_7_ ( cdsbus4[7], Data1[7]);
inv_1xT I28_6_ ( cdsbus4[6], Data1[6]);
inv_1xT I28_5_ ( cdsbus4[5], Data1[5]);
inv_1xT I28_4_ ( cdsbus4[4], Data1[4]);
inv_1xT I28_3_ ( cdsbus4[3], Data1[3]);
inv_1xT I28_2_ ( cdsbus4[2], Data1[2]);
inv_1xT I28_1_ ( cdsbus4[1], Data1[1]);
inv_1xT I28_0_ ( cdsbus4[0], Data1[0]);
inv_1xT I25_7_ ( WDataAck[7], cdsbus0[7]);
inv_1xT I25_6_ ( WDataAck[6], cdsbus0[6]);
inv_1xT I25_5_ ( WDataAck[5], cdsbus0[5]);
inv_1xT I25_4_ ( WDataAck[4], cdsbus0[4]);
inv_1xT I25_3_ ( WDataAck[3], cdsbus0[3]);
inv_1xT I25_2_ ( WDataAck[2], cdsbus0[2]);
inv_1xT I25_1_ ( WDataAck[1], cdsbus0[1]);
inv_1xT I25_0_ ( WDataAck[0], cdsbus0[0]);

endmodule
