amsExpScalingFactor "no"
upgradeMsgSevWarn ""
iterInstExpFormat "%b_%i"
amsVerbose nil
splitNetlistFormat nil
amsDefinitionViews "symbol schematic extracted"
initFile ""
print_control_vars t
netlistMaxWarn ""
netClashFormat "%b_netclash"
instClashFormat "%b_instclash"
useEffectiveCDF nil
checkForMissingShadows nil
unquoteNumbers t
forceCleanTempDirForShadow nil
includeInstCdfParams nil
updateShadow nil
amsVerilogHonorSmForLeaf nil
amsLSB_MSB nil
amsTempDirForShadows ""
amsScalarInstances t
paramDefVals ""
verboseShadowLog nil
paramGlobalDefVal "0"
emh_printEmptySubckt t
useDefparam nil
ifdefLanguageExtensions nil
useUselibForSpice nil
desVarsToBeNetlistedAsInt ""
emh_phyCell ""
amsmaxErrors "50"
includeFiles "disciplines.vams userDisciplines.vams"
useSpectreInfo "spectre veriloga spice"
emh_printPhysicalInst nil
modifyParamScope "no"
headerText "none"
emh_macroLibList ""
templateScript ""
amsTraverseConfigForTextViews t
emh_digNetlistFile "digital.v"
emh_PrintPwrGndConnectivity nil
amsPortConnectionByNameOrOrder "name"
templateFile ""
emh_DigitalInstList nil
useFileUselib t
vlogGroundSigs "gnd!"
useRunDirNetlistsOnly t
upgradeMsgSevError ""
vlogSupply1Sigs ""
ossEscNameMapping t
preferMEOverImplicit t
vlogSupply0Sigs ""
amsExcludeParams ""
allowSparseBuses "yes"
emh_maskLayoutView t
allowDeviantBuses "yes"
netlistNoWarn ""
aliasInstFormat "ams_alias_inst_%i"
allowNameCollisions "yes"
allowIllegalIdentifiers "yes"
globalSignals (("" "D" "vdd!" "CDBA" "wire" "" "NO" "F" "wire" "") ("" "D" "gnd!" "CDBA" "wire" "" "YES" "F" "wire" "") ("" "D" "vcc!" "CDBA" "wire" "" "NO" "F" "wire" ""))
