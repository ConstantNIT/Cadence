
`timescale 1ps / 1ps

module test;


wire  Ack;


wire [4:0]  Ctrl_Ack;
wire [7:0]  WriteAck;
wire [31:0]  ReadData;

reg [31:0]  WriteData;
reg [7:0]  RD_Ack;
reg [1:0]  RW;
reg [19:0]  A;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_13 top(Ack, Ctrl_Ack, ReadData, WriteAck, A, RD_Ack, RW, 
     WriteData); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 
// Vermix stimulus file.
// Default verimix stimulus. 

integer rLog;
integer wLog;
integer seed;
integer i;
integer start;
integer readOrWrite;
reg[19:0] lastWriteAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;


initial
begin 

   seed = 5;
   start = 0;
   readOrWrite=1;
   rLog=$fopen("/tmp2/bankRLog.csv");
   $fdisplay(rLog, "R_Addr, R1[31:0], R0[31:0], total_time(ps), read_delay(ps)");

   wLog=$fopen("/tmp2/bankWLog.csv"); 
   $fdisplay(wLog, "W_Addr, W1[31:0], W0[31:0], total_time(ps), write_delay(ps)");

   A[19:0]  = 20'h00000;
   RW[1:0]  = 2'b00;
   RD_Ack[7:0] = 8'hFF;
   WriteData[31:0] = 32'h00000000;
   #1000;

   RD_Ack[7:0] = 8'hFF;
   A[19:0]  = 20'h11111;
   RW[1:0]  = 2'b01;
   WriteData[31:0] = 32'h88888888;
   readOrWrite = 1;
   #1000;
   A[19:0]  = 20'h00000;
   RW[1:0]  = 2'b00;
   RD_Ack[7:0] = 8'hFF;
   WriteData[31:0] = 32'h00000000;
   #1000;

   RD_Ack[7:0] = 8'hFF;
   A[19:0]  = 20'h11111;
   RW[1:0]  = 2'b01;
   WriteData[31:0] = 32'h88888888;
   start = 1;
   readOrWrite = 1;

end 

always @(negedge Ack) begin
   if (start==1) begin
     if(readOrWrite ==1) begin
   	  wDelay = $time - wStart;
   	  $fdisplay(wLog, "%h %h %t %t", A[19:0], WriteData[31:0], $time, wDelay);
          lastWriteAddr[19:0] <= A[19:0];
   	  WriteData[31:0] = 32'h00000000;
          A[19:0] 	  = 20'h00000;
          RW[1:0]         = 2'b00;
       	  wStart = $time;
      end else begin   
   	   rDelay = $time - rStart;
	   $fdisplay(rLog, "%h %h %t %t", A[19:0], ReadData[31:0], $time, rDelay);   	   
   	   RD_Ack[7:0]     = 8'h00;
   	   RW[1:0]         = 2'b00;
   	   A[19:0]         = 20'h00000;
	   rStart          = $time;
      end
   end
 end

always @(posedge Ack) begin
   if (start==1) begin
     if(readOrWrite ==0) begin
   	  rDelay = $time - rStart;
	  $fdisplay(rLog, "%h %h %t %t", A[19:0], ReadData[31:0], $time, rDelay); 
   	  A[19:0]  = 20'h22222;
   	  RW[1:0]  = 2'b01;
   	  WriteData[31:0] = 32'h88888888;
	  readOrWrite =1;
       	  wStart = $time;
      end else begin   
   	   wDelay = $time - wStart;
	   $fdisplay(wLog, "%h %h %t %t", A[19:0], WriteData[31:0], $time, wDelay);   	   
   	   RD_Ack[7:0]     = 8'hFF;
   	   RW[1:0]         = 2'b10;
   	   A[19:0]         = lastWriteAddr;
	   rStart          = $time;
	   readOrWrite =0;
      end
   end
 end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /~WAck<0>
	$vmx_define_export( test.top.cdsbus3[12], "99998"); // /~A<12>
	$vmx_define_import( test.top.mixedNet99997, "99997"); // /~WAck<1>
	$vmx_define_import( test.top.mixedNet99996, "99996"); // /~WAck<3>
	$vmx_define_import( test.top.mixedNet99995, "99995"); // /~ReadData<18>
	$vmx_define_import( test.top.mixedNet99994, "99994"); // /net013<4>
	$vmx_define_import( test.top.mixedNet99993, "99993"); // /~ReadData<23>
	$vmx_define_export( test.top.cdsbus3[14], "99992"); // /~A<14>
	$vmx_define_import( test.top.mixedNet99991, "99991"); // /~ReadData<20>
	$vmx_define_import( test.top.mixedNet99990, "99990"); // /net013<2>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /~ReadData<19>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /~ReadData<25>
	$vmx_define_import( test.top.mixedNet99987, "99987"); // /~ReadData<30>
	$vmx_define_import( test.top.mixedNet99986, "99986"); // /~ReadData<24>
	$vmx_define_export( test.top.cdsbus0[7], "99985"); // /~WriteData<7>
	$vmx_define_import( test.top.mixedNet99984, "99984"); // /~ReadData<1>
	$vmx_define_export( test.top.cdsbus3[11], "99983"); // /~A<11>
	$vmx_define_import( test.top.mixedNet99982, "99982"); // /~ReadData<31>
	$vmx_define_export( test.top.cdsbus3[10], "99981"); // /~A<10>
	$vmx_define_export( test.top.cdsbus3[4], "99980"); // /~A<4>
	$vmx_define_export( test.top.cdsbus0[20], "99979"); // /~WriteData<20>
	$vmx_define_export( test.top.cdsbus0[19], "99978"); // /~WriteData<19>
	$vmx_define_import( test.top.mixedNet99977, "99977"); // /~ReadData<26>
	$vmx_define_import( test.top.mixedNet99976, "99976"); // /~ReadData<27>
	$vmx_define_import( test.top.mixedNet99975, "99975"); // /~ReadData<0>
	$vmx_define_export( test.top.cdsbus0[26], "99974"); // /~WriteData<26>
	$vmx_define_export( test.top.cdsbus3[3], "99973"); // /~A<3>
	$vmx_define_export( test.top.cdsbus3[9], "99972"); // /~A<9>
	$vmx_define_import( test.top.mixedNet99971, "99971"); // /~WAck<2>
	$vmx_define_import( test.top.mixedNet99970, "99970"); // /~ReadData<6>
	$vmx_define_import( test.top.mixedNet99969, "99969"); // /~ReadData<3>
	$vmx_define_import( test.top.mixedNet99968, "99968"); // /~ReadData<11>
	$vmx_define_import( test.top.mixedNet99967, "99967"); // /~ReadData<10>
	$vmx_define_import( test.top.mixedNet99966, "99966"); // /~ReadData<9>
	$vmx_define_export( test.top.cdsbus0[11], "99965"); // /~WriteData<11>
	$vmx_define_export( test.top.cdsbus0[10], "99964"); // /~WriteData<10>
	$vmx_define_export( test.top.cdsbus5[1], "99963"); // /~RAck<1>
	$vmx_define_export( test.top.cdsbus3[15], "99962"); // /~A<15>
	$vmx_define_export( test.top.cdsbus0[13], "99961"); // /~WriteData<13>
	$vmx_define_import( test.top.mixedNet99960, "99960"); // /~WAck<4>
	$vmx_define_export( test.top.cdsbus0[12], "99959"); // /~WriteData<12>
	$vmx_define_export( test.top.cdsbus5[5], "99958"); // /~RAck<5>
	$vmx_define_export( test.top.cdsbus0[16], "99957"); // /~WriteData<16>
	$vmx_define_export( test.top.cdsbus0[4], "99956"); // /~WriteData<4>
	$vmx_define_export( test.top.cdsbus0[3], "99955"); // /~WriteData<3>
	$vmx_define_import( test.top.mixedNet99954, "99954"); // /~ReadData<2>
	$vmx_define_export( test.top.cdsbus0[21], "99953"); // /~WriteData<21>
	$vmx_define_import( test.top.mixedNet99952, "99952"); // /~ReadData<14>
	$vmx_define_export( test.top.cdsbus0[18], "99951"); // /~WriteData<18>
	$vmx_define_import( test.top.mixedNet99950, "99950"); // /~ReadData<8>
	$vmx_define_export( test.top.cdsbus2[0], "99949"); // /~RW<0>
	$vmx_define_import( test.top.mixedNet99948, "99948"); // /~ReadData<4>
	$vmx_define_export( test.top.cdsbus0[17], "99947"); // /~WriteData<17>
	$vmx_define_export( test.top.cdsbus0[31], "99946"); // /~WriteData<31>
	$vmx_define_import( test.top.mixedNet99945, "99945"); // /net013<0>
	$vmx_define_export( test.top.cdsbus5[4], "99944"); // /~RAck<4>
	$vmx_define_import( test.top.mixedNet99943, "99943"); // /~ReadData<7>
	$vmx_define_export( test.top.cdsbus3[8], "99942"); // /~A<8>
	$vmx_define_export( test.top.cdsbus0[9], "99941"); // /~WriteData<9>
	$vmx_define_export( test.top.cdsbus3[7], "99940"); // /~A<7>
	$vmx_define_export( test.top.cdsbus0[27], "99939"); // /~WriteData<27>
	$vmx_define_export( test.top.cdsbus3[6], "99938"); // /~A<6>
	$vmx_define_export( test.top.cdsbus3[5], "99937"); // /~A<5>
	$vmx_define_export( test.top.cdsbus0[29], "99936"); // /~WriteData<29>
	$vmx_define_export( test.top.cdsbus5[3], "99935"); // /~RAck<3>
	$vmx_define_export( test.top.cdsbus0[6], "99934"); // /~WriteData<6>
	$vmx_define_export( test.top.cdsbus2[1], "99933"); // /~RW<1>
	$vmx_define_export( test.top.cdsbus0[5], "99932"); // /~WriteData<5>
	$vmx_define_export( test.top.cdsbus0[15], "99931"); // /~WriteData<15>
	$vmx_define_export( test.top.cdsbus5[6], "99930"); // /~RAck<6>
	$vmx_define_export( test.top.cdsbus0[24], "99929"); // /~WriteData<24>
	$vmx_define_export( test.top.cdsbus3[17], "99928"); // /~A<17>
	$vmx_define_import( test.top.mixedNet99927, "99927"); // /~ReadData<17>
	$vmx_define_export( test.top.cdsbus0[22], "99926"); // /~WriteData<22>
	$vmx_define_export( test.top.cdsbus0[23], "99925"); // /~WriteData<23>
	$vmx_define_export( test.top.cdsbus3[16], "99924"); // /~A<16>
	$vmx_define_export( test.top.cdsbus0[25], "99923"); // /~WriteData<25>
	$vmx_define_export( test.top.cdsbus3[2], "99922"); // /~A<2>
	$vmx_define_import( test.top.mixedNet99921, "99921"); // /net013<3>
	$vmx_define_export( test.top.cdsbus3[19], "99920"); // /~A<19>
	$vmx_define_export( test.top.cdsbus0[14], "99919"); // /~WriteData<14>
	$vmx_define_import( test.top.mixedNet99918, "99918"); // /~ReadData<22>
	$vmx_define_export( test.top.cdsbus0[8], "99917"); // /~WriteData<8>
	$vmx_define_import( test.top.mixedNet99916, "99916"); // /~ReadData<29>
	$vmx_define_import( test.top.mixedNet99915, "99915"); // /~WAck<7>
	$vmx_define_import( test.top.mixedNet99914, "99914"); // /~ReadData<5>
	$vmx_define_import( test.top.mixedNet99913, "99913"); // /~ReadData<16>
	$vmx_define_export( test.top.cdsbus0[2], "99912"); // /~WriteData<2>
	$vmx_define_import( test.top.mixedNet99911, "99911"); // /net013<1>
	$vmx_define_export( test.top.cdsbus3[18], "99910"); // /~A<18>
	$vmx_define_export( test.top.cdsbus0[1], "99909"); // /~WriteData<1>
	$vmx_define_export( test.top.cdsbus3[13], "99908"); // /~A<13>
	$vmx_define_export( test.top.cdsbus0[0], "99907"); // /~WriteData<0>
	$vmx_define_export( test.top.cdsbus0[28], "99906"); // /~WriteData<28>
	$vmx_define_export( test.top.cdsbus5[7], "99905"); // /~RAck<7>
	$vmx_define_import( test.top.mixedNet99904, "99904"); // /~ReadData<21>
	$vmx_define_export( test.top.cdsbus5[0], "99903"); // /~RAck<0>
	$vmx_define_import( test.top.mixedNet99902, "99902"); // /~ReadData<28>
	$vmx_define_export( test.top.cdsbus5[2], "99901"); // /~RAck<2>
	$vmx_define_import( test.top.mixedNet99900, "99900"); // /~WAck<6>
	$vmx_define_import( test.top.mixedNet99899, "99899"); // /~ReadData<13>
	$vmx_define_export( test.top.cdsbus3[0], "99898"); // /~A<0>
	$vmx_define_export( test.top.cdsbus3[1], "99897"); // /~A<1>
	$vmx_define_export( test.top.cdsbus0[30], "99896"); // /~WriteData<30>
	$vmx_define_import( test.top.mixedNet99895, "99895"); // /~WAck<5>
	$vmx_define_import( test.top.mixedNet99894, "99894"); // /~ReadData<12>
	$vmx_define_import( test.top.mixedNet99893, "99893"); // /~ReadData<15>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.ReadData[8], test.top.ReadData[9], test.top.ReadData[10], test.top.WriteData[23], test.top.WriteAck[3], test.top.WriteAck[2], test.top.Ctrl_Ack[4], test.top.Ctrl_Ack[3], test.top.Ctrl_Ack[2], test.top.Ctrl_Ack[1], test.top.Ctrl_Ack[0], test.top.WriteData[31], test.top.WriteData[30], test.top.WriteData[12], test.top.WriteData[29], test.top.WriteData[28], test.top.WriteData[27], test.top.A[3], test.top.A[10], test.top.WriteData[9], test.top.A[13], test.top.A[11], test.top.RD_Ack[6], test.top.WriteData[25], test.top.ReadData[23], test.top.ReadData[27], test.top.ReadData[26], test.top.A[8], test.top.ReadData[2], test.top.A[7], test.top.WriteData[4], test.top.RD_Ack[2], test.top.ReadData[22], test.top.RD_Ack[7], test.top.A[4], test.top.WriteData[6], test.top.WriteData[20], test.top.WriteAck[5], test.top.WriteData[18], test.top.ReadData[5], test.top.A[1], test.top.WriteData[17], test.top.WriteData[16], test.top.WriteData[15], test.top.ReadData[15], test.top.A[19], test.top.A[0], test.top.A[12], 
test.top.ReadData[4], test.top.WriteData[19], test.top.WriteAck[4], test.top.ReadData[7], test.top.RW[0], test.top.RD_Ack[3], test.top.ReadData[29], test.top.ReadData[28], test.top.A[9], test.top.WriteData[8], test.top.ReadData[6], test.top.WriteData[3], test.top.WriteData[13], test.top.WriteData[2], test.top.WriteData[1], test.top.A[2], test.top.WriteData[0], test.top.ReadData[12], test.top.ReadData[16], test.top.ReadData[3], test.top.WriteAck[6], test.top.RD_Ack[5], test.top.ReadData[13], test.top.WriteData[7], test.top.RD_Ack[4], test.top.ReadData[25], test.top.A[5], test.top.WriteData[11], test.top.ReadData[24], test.top.RD_Ack[1], test.top.A[18], test.top.WriteData[14], test.top.WriteAck[1], test.top.ReadData[18], test.top.A[17], test.top.WriteAck[0], test.top.ReadData[11], test.top.RD_Ack[0], test.top.ReadData[19], test.top.ReadData[21], test.top.ReadData[20], test.top.A[14], test.top.ReadData[30], test.top.ReadData[17], test.top.WriteData[24], test.top.WriteData[22], test.top.WriteData[5], 
test.top.A[15], test.top.WriteData[26], test.top.WriteData[10], test.top.WriteAck[7], test.top.RW[1], test.top.ReadData[14], test.top.ReadData[1], test.top.A[16], test.top.WriteData[21], test.top.A[6], test.top.ReadData[31], test.top.ReadData[0], test.top.A[19:0], test.top.WriteData[31:0], test.top.Ctrl_Ack[4:0], test.top.RW[1:0], test.top.RD_Ack[7:0], test.top.ReadData[31:0], test.top.WriteAck[7:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_BANK_Test, View - schematic
// LAST TIME SAVED: Apr  8 21:24:19 2015
// NETLIST TIME: Apr  9 00:55:58 2015
`timescale 1ps / 1ps 

module cdsModule_13 ( Ack, Ctrl_Ack, ReadData, WriteAck, A, RD_Ack, RW,
     WriteData );

output  Ack;


output [4:0]  Ctrl_Ack;
output [7:0]  WriteAck;
output [31:0]  ReadData;

input [31:0]  WriteData;
input [7:0]  RD_Ack;
input [1:0]  RW;
input [19:0]  A;

// Buses in the design

wire  [31:0]  WriteDataT;

wire  [19:0]  AT;

wire  [31:0]  ReaDataT;

wire  [7:0]  WAck;

wire  [31:0]  cdsbus0;

wire  [0:4]  net018;

wire  [0:4]  net013;

wire  [7:0]  cdsbus1;

wire  [7:0]  RAckT;

wire  [1:0]  RWT;

wire  [1:0]  cdsbus2;

wire  [19:0]  cdsbus3;

wire  [31:0]  cdsbus4;

wire  [7:0]  cdsbus5;

// begin interface element definitions

reg mixedNet99999;
reg mixedNet99997;
reg mixedNet99996;
reg mixedNet99995;
reg mixedNet99994;
reg mixedNet99993;
reg mixedNet99991;
reg mixedNet99990;
reg mixedNet99989;
reg mixedNet99988;
reg mixedNet99987;
reg mixedNet99986;
reg mixedNet99984;
reg mixedNet99982;
reg mixedNet99977;
reg mixedNet99976;
reg mixedNet99975;
reg mixedNet99971;
reg mixedNet99970;
reg mixedNet99969;
reg mixedNet99968;
reg mixedNet99967;
reg mixedNet99966;
reg mixedNet99960;
reg mixedNet99954;
reg mixedNet99952;
reg mixedNet99950;
reg mixedNet99948;
reg mixedNet99945;
reg mixedNet99943;
reg mixedNet99927;
reg mixedNet99921;
reg mixedNet99918;
reg mixedNet99916;
reg mixedNet99915;
reg mixedNet99914;
reg mixedNet99913;
reg mixedNet99911;
reg mixedNet99904;
reg mixedNet99902;
reg mixedNet99900;
reg mixedNet99899;
reg mixedNet99895;
reg mixedNet99894;
reg mixedNet99893;
assign cdsbus1[0] = mixedNet99999;
assign cdsbus1[1] = mixedNet99997;
assign cdsbus1[3] = mixedNet99996;
assign cdsbus4[18] = mixedNet99995;
assign net013[4] = mixedNet99994;
assign cdsbus4[23] = mixedNet99993;
assign cdsbus4[20] = mixedNet99991;
assign net013[2] = mixedNet99990;
assign cdsbus4[19] = mixedNet99989;
assign cdsbus4[25] = mixedNet99988;
assign cdsbus4[30] = mixedNet99987;
assign cdsbus4[24] = mixedNet99986;
assign cdsbus4[1] = mixedNet99984;
assign cdsbus4[31] = mixedNet99982;
assign cdsbus4[26] = mixedNet99977;
assign cdsbus4[27] = mixedNet99976;
assign cdsbus4[0] = mixedNet99975;
assign cdsbus1[2] = mixedNet99971;
assign cdsbus4[6] = mixedNet99970;
assign cdsbus4[3] = mixedNet99969;
assign cdsbus4[11] = mixedNet99968;
assign cdsbus4[10] = mixedNet99967;
assign cdsbus4[9] = mixedNet99966;
assign cdsbus1[4] = mixedNet99960;
assign cdsbus4[2] = mixedNet99954;
assign cdsbus4[14] = mixedNet99952;
assign cdsbus4[8] = mixedNet99950;
assign cdsbus4[4] = mixedNet99948;
assign net013[0] = mixedNet99945;
assign cdsbus4[7] = mixedNet99943;
assign cdsbus4[17] = mixedNet99927;
assign net013[3] = mixedNet99921;
assign cdsbus4[22] = mixedNet99918;
assign cdsbus4[29] = mixedNet99916;
assign cdsbus1[7] = mixedNet99915;
assign cdsbus4[5] = mixedNet99914;
assign cdsbus4[16] = mixedNet99913;
assign net013[1] = mixedNet99911;
assign cdsbus4[21] = mixedNet99904;
assign cdsbus4[28] = mixedNet99902;
assign cdsbus1[6] = mixedNet99900;
assign cdsbus4[13] = mixedNet99899;
assign cdsbus1[5] = mixedNet99895;
assign cdsbus4[12] = mixedNet99894;
assign cdsbus4[15] = mixedNet99893;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_BANK_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I18_4_ ( Ctrl_Ack[4], net013[0]);
inv_1xT I18_3_ ( Ctrl_Ack[3], net013[1]);
inv_1xT I18_2_ ( Ctrl_Ack[2], net013[2]);
inv_1xT I18_1_ ( Ctrl_Ack[1], net013[3]);
inv_1xT I18_0_ ( Ctrl_Ack[0], net013[4]);
inv_1xT I4_31_ ( cdsbus0[31], WriteData[31]);
inv_1xT I4_30_ ( cdsbus0[30], WriteData[30]);
inv_1xT I4_29_ ( cdsbus0[29], WriteData[29]);
inv_1xT I4_28_ ( cdsbus0[28], WriteData[28]);
inv_1xT I4_27_ ( cdsbus0[27], WriteData[27]);
inv_1xT I4_26_ ( cdsbus0[26], WriteData[26]);
inv_1xT I4_25_ ( cdsbus0[25], WriteData[25]);
inv_1xT I4_24_ ( cdsbus0[24], WriteData[24]);
inv_1xT I4_23_ ( cdsbus0[23], WriteData[23]);
inv_1xT I4_22_ ( cdsbus0[22], WriteData[22]);
inv_1xT I4_21_ ( cdsbus0[21], WriteData[21]);
inv_1xT I4_20_ ( cdsbus0[20], WriteData[20]);
inv_1xT I4_19_ ( cdsbus0[19], WriteData[19]);
inv_1xT I4_18_ ( cdsbus0[18], WriteData[18]);
inv_1xT I4_17_ ( cdsbus0[17], WriteData[17]);
inv_1xT I4_16_ ( cdsbus0[16], WriteData[16]);
inv_1xT I4_15_ ( cdsbus0[15], WriteData[15]);
inv_1xT I4_14_ ( cdsbus0[14], WriteData[14]);
inv_1xT I4_13_ ( cdsbus0[13], WriteData[13]);
inv_1xT I4_12_ ( cdsbus0[12], WriteData[12]);
inv_1xT I4_11_ ( cdsbus0[11], WriteData[11]);
inv_1xT I4_10_ ( cdsbus0[10], WriteData[10]);
inv_1xT I4_9_ ( cdsbus0[9], WriteData[9]);
inv_1xT I4_8_ ( cdsbus0[8], WriteData[8]);
inv_1xT I4_7_ ( cdsbus0[7], WriteData[7]);
inv_1xT I4_6_ ( cdsbus0[6], WriteData[6]);
inv_1xT I4_5_ ( cdsbus0[5], WriteData[5]);
inv_1xT I4_4_ ( cdsbus0[4], WriteData[4]);
inv_1xT I4_3_ ( cdsbus0[3], WriteData[3]);
inv_1xT I4_2_ ( cdsbus0[2], WriteData[2]);
inv_1xT I4_1_ ( cdsbus0[1], WriteData[1]);
inv_1xT I4_0_ ( cdsbus0[0], WriteData[0]);
inv_1xT I7_31_ ( ReadData[31], cdsbus4[31]);
inv_1xT I7_30_ ( ReadData[30], cdsbus4[30]);
inv_1xT I7_29_ ( ReadData[29], cdsbus4[29]);
inv_1xT I7_28_ ( ReadData[28], cdsbus4[28]);
inv_1xT I7_27_ ( ReadData[27], cdsbus4[27]);
inv_1xT I7_26_ ( ReadData[26], cdsbus4[26]);
inv_1xT I7_25_ ( ReadData[25], cdsbus4[25]);
inv_1xT I7_24_ ( ReadData[24], cdsbus4[24]);
inv_1xT I7_23_ ( ReadData[23], cdsbus4[23]);
inv_1xT I7_22_ ( ReadData[22], cdsbus4[22]);
inv_1xT I7_21_ ( ReadData[21], cdsbus4[21]);
inv_1xT I7_20_ ( ReadData[20], cdsbus4[20]);
inv_1xT I7_19_ ( ReadData[19], cdsbus4[19]);
inv_1xT I7_18_ ( ReadData[18], cdsbus4[18]);
inv_1xT I7_17_ ( ReadData[17], cdsbus4[17]);
inv_1xT I7_16_ ( ReadData[16], cdsbus4[16]);
inv_1xT I7_15_ ( ReadData[15], cdsbus4[15]);
inv_1xT I7_14_ ( ReadData[14], cdsbus4[14]);
inv_1xT I7_13_ ( ReadData[13], cdsbus4[13]);
inv_1xT I7_12_ ( ReadData[12], cdsbus4[12]);
inv_1xT I7_11_ ( ReadData[11], cdsbus4[11]);
inv_1xT I7_10_ ( ReadData[10], cdsbus4[10]);
inv_1xT I7_9_ ( ReadData[9], cdsbus4[9]);
inv_1xT I7_8_ ( ReadData[8], cdsbus4[8]);
inv_1xT I7_7_ ( ReadData[7], cdsbus4[7]);
inv_1xT I7_6_ ( ReadData[6], cdsbus4[6]);
inv_1xT I7_5_ ( ReadData[5], cdsbus4[5]);
inv_1xT I7_4_ ( ReadData[4], cdsbus4[4]);
inv_1xT I7_3_ ( ReadData[3], cdsbus4[3]);
inv_1xT I7_2_ ( ReadData[2], cdsbus4[2]);
inv_1xT I7_1_ ( ReadData[1], cdsbus4[1]);
inv_1xT I7_0_ ( ReadData[0], cdsbus4[0]);
inv_1xT I9_7_ ( WriteAck[7], cdsbus1[7]);
inv_1xT I9_6_ ( WriteAck[6], cdsbus1[6]);
inv_1xT I9_5_ ( WriteAck[5], cdsbus1[5]);
inv_1xT I9_4_ ( WriteAck[4], cdsbus1[4]);
inv_1xT I9_3_ ( WriteAck[3], cdsbus1[3]);
inv_1xT I9_2_ ( WriteAck[2], cdsbus1[2]);
inv_1xT I9_1_ ( WriteAck[1], cdsbus1[1]);
inv_1xT I9_0_ ( WriteAck[0], cdsbus1[0]);
inv_1xT I12_7_ ( cdsbus5[7], RD_Ack[7]);
inv_1xT I12_6_ ( cdsbus5[6], RD_Ack[6]);
inv_1xT I12_5_ ( cdsbus5[5], RD_Ack[5]);
inv_1xT I12_4_ ( cdsbus5[4], RD_Ack[4]);
inv_1xT I12_3_ ( cdsbus5[3], RD_Ack[3]);
inv_1xT I12_2_ ( cdsbus5[2], RD_Ack[2]);
inv_1xT I12_1_ ( cdsbus5[1], RD_Ack[1]);
inv_1xT I12_0_ ( cdsbus5[0], RD_Ack[0]);
inv_1xT I20_1_ ( cdsbus2[1], RW[1]);
inv_1xT I20_0_ ( cdsbus2[0], RW[0]);
inv_1xT I19_19_ ( cdsbus3[19], A[19]);
inv_1xT I19_18_ ( cdsbus3[18], A[18]);
inv_1xT I19_17_ ( cdsbus3[17], A[17]);
inv_1xT I19_16_ ( cdsbus3[16], A[16]);
inv_1xT I19_15_ ( cdsbus3[15], A[15]);
inv_1xT I19_14_ ( cdsbus3[14], A[14]);
inv_1xT I19_13_ ( cdsbus3[13], A[13]);
inv_1xT I19_12_ ( cdsbus3[12], A[12]);
inv_1xT I19_11_ ( cdsbus3[11], A[11]);
inv_1xT I19_10_ ( cdsbus3[10], A[10]);
inv_1xT I19_9_ ( cdsbus3[9], A[9]);
inv_1xT I19_8_ ( cdsbus3[8], A[8]);
inv_1xT I19_7_ ( cdsbus3[7], A[7]);
inv_1xT I19_6_ ( cdsbus3[6], A[6]);
inv_1xT I19_5_ ( cdsbus3[5], A[5]);
inv_1xT I19_4_ ( cdsbus3[4], A[4]);
inv_1xT I19_3_ ( cdsbus3[3], A[3]);
inv_1xT I19_2_ ( cdsbus3[2], A[2]);
inv_1xT I19_1_ ( cdsbus3[1], A[1]);
inv_1xT I19_0_ ( cdsbus3[0], A[0]);

endmodule
