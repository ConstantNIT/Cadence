
`timescale 1ps / 1ps

module test;


wire  Ack;


wire [4:0]  Ctrl_Ack;
wire [7:0]  WriteDataAck;
wire [31:0]  ReadData;

reg [31:0]  WriteData;
reg [7:0]  ReadDataAck;
reg [19:0]  A;
reg [1:0]  RW;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




cdsModule_47 top(Ack, Ctrl_Ack, ReadData, WriteDataAck, A, RW, 
     ReadDataAck, WriteData); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 
// Vermix stimulus file.
// Default verimix stimulus. 

integer rLog;
integer wLog;
integer seed;
integer i;
integer start;
integer readCount;
integer readOrWrite;
reg[19:0] lastWriteAddr;
reg[9:0] logAddr;

real rStart;
real rDelay;
real wStart;
real wDelay;


initial
begin 

   seed = 5;
   start = 0;
readCount=0;
   readOrWrite=1;
   rLog=$fopen("/tmp2/bankRLog.csv");
   $fdisplay(rLog, "R_Addr, R1[31:0], R0[31:0], total_time(ps), read_delay(ps)");

   wLog=$fopen("/tmp2/bankWLog.csv"); 
   $fdisplay(wLog, "W_Addr, W1[31:0], W0[31:0], total_time(ps), write_delay(ps)");

   A[19:0]  = 20'h00000;
   RW[1:0]  = 2'b00;
   RD_Ack[7:0] = 8'h00;
   WriteData[31:0] = 32'h00000000;
   #2000;

   A[19:0]  = 20'h11111;
   RW[1:0]  = 2'b01;
   WriteData[31:0] = 32'h44884488;
   wStart = $time;
   start = 1;
   readOrWrite = 1;

end 

always @(negedge Ack) begin
   if (start==1) begin
     if(readOrWrite ==1) begin
   	  	wDelay = $time - wStart;
   	  	$fdisplay(wLog, "%h %h %t %t", A[19:0], WriteData[31:0], $time, wDelay);
        lastWriteAddr[19:0] <= A[19:0];
   	  	WriteData[31:0] 	= 32'h00000000;
        A[19:0] 	  		= 20'h00000;
        RW[1:0]         	= 2'b00;
       	wStart = $time;
      end else begin   
   	   	rDelay = $time - rStart;
	   	$fdisplay(rLog, "%h %h %t %t", A[19:0], ReadData[31:0], $time, rDelay);   	   
   	   	RD_Ack[7:0]     = 8'h00;
   	   	RW[1:0]         = 2'b00;
   	   	A[19:0]         = 20'h00000;
	   	rStart          = $time;
      end
   end
end

always @(posedge Ack) begin
   if (start==1) begin
     if(readOrWrite ==0) begin
   	  rDelay = $time - rStart;
	  $fdisplay(rLog, "%h %h %t %t", A[19:0], ReadData[31:0], $time, rDelay); 
	  readCount = readCount + 1;
	  if (readCount == 2) begin
		$finish;
	  end
   	  logAddr[9:0] = $random;
	  A[0]   = ~logAddr[0] & ~logAddr[1];
	  A[1]   =  logAddr[0] & ~logAddr[1];
	  A[2]   = ~logAddr[0] &  logAddr[1];
      A[3]   =  logAddr[0] &  logAddr[1];
	  A[4]   = ~logAddr[2] & ~logAddr[3];
	  A[5]   =  logAddr[2] & ~logAddr[3];
	  A[6]   = ~logAddr[2] &  logAddr[3];
      A[7]   =  logAddr[2] &  logAddr[3];
	  A[8]   = ~logAddr[4] & ~logAddr[5];
	  A[9]   =  logAddr[4] & ~logAddr[5];
	  A[10]  = ~logAddr[4] &  logAddr[5];
      A[11]  =  logAddr[4] &  logAddr[5];
	  A[12]  = ~logAddr[6] & ~logAddr[7];
	  A[13]  =  logAddr[6] & ~logAddr[7];
	  A[14]  = ~logAddr[6] &  logAddr[7];
      A[15]  =  logAddr[6] &  logAddr[7];
	  A[16]  = ~logAddr[8] & ~logAddr[9];
	  A[17]  =  logAddr[8] & ~logAddr[9];
	  A[18]  = ~logAddr[8] &  logAddr[9];
      A[19]  =  logAddr[8] &  logAddr[9];

   	  RW[1:0]  = 2'b01;
   	  WriteData[31:0] = 32'h88448844;
	  readOrWrite =1;
       	  wStart = $time;
      end else begin   
   	   wDelay = $time - wStart;
	   $fdisplay(wLog, "%h %h %t %t", A[19:0], WriteData[31:0], $time, wDelay);   	   
   	   RD_Ack[7:0]     = 8'hFF;
   	   RW[1:0]         = 2'b10;
   	   A[19:0]         = lastWriteAddr;
	   rStart          = $time;
	   readOrWrite =0;
      end
   end
 end
`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /net013<0>
	$vmx_define_export( test.top.cdsbus0[2], "99998"); // /~A<2>
	$vmx_define_import( test.top.mixedNet99997, "99997"); // /~ReadData<11>
	$vmx_define_import( test.top.mixedNet99996, "99996"); // /~ReadData<19>
	$vmx_define_export( test.top.cdsbus0[12], "99995"); // /~A<12>
	$vmx_define_export( test.top.cdsbus0[17], "99994"); // /~A<17>
	$vmx_define_import( test.top.mixedNet99993, "99993"); // /~ReadData<18>
	$vmx_define_import( test.top.mixedNet99992, "99992"); // /net013<2>
	$vmx_define_export( test.top.cdsbus5[5], "99991"); // /~RAck<5>
	$vmx_define_export( test.top.cdsbus4[18], "99990"); // /~WriteData<18>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /~ReadData<7>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /~ReadData<20>
	$vmx_define_export( test.top.cdsbus4[31], "99987"); // /~WriteData<31>
	$vmx_define_export( test.top.cdsbus4[13], "99986"); // /~WriteData<13>
	$vmx_define_export( test.top.cdsbus4[0], "99985"); // /~WriteData<0>
	$vmx_define_export( test.top.cdsbus1[1], "99984"); // /~RW<1>
	$vmx_define_export( test.top.cdsbus0[15], "99983"); // /~A<15>
	$vmx_define_export( test.top.cdsbus0[14], "99982"); // /~A<14>
	$vmx_define_export( test.top.cdsbus0[0], "99981"); // /~A<0>
	$vmx_define_import( test.top.mixedNet99980, "99980"); // /~WAck<1>
	$vmx_define_import( test.top.mixedNet99979, "99979"); // /~WAck<3>
	$vmx_define_export( test.top.cdsbus4[9], "99978"); // /~WriteData<9>
	$vmx_define_export( test.top.cdsbus4[27], "99977"); // /~WriteData<27>
	$vmx_define_import( test.top.mixedNet99976, "99976"); // /net013<4>
	$vmx_define_import( test.top.mixedNet99975, "99975"); // /~ReadData<16>
	$vmx_define_export( test.top.cdsbus4[12], "99974"); // /~WriteData<12>
	$vmx_define_import( test.top.mixedNet99973, "99973"); // /net013<1>
	$vmx_define_import( test.top.mixedNet99972, "99972"); // /~WAck<5>
	$vmx_define_export( test.top.cdsbus5[3], "99971"); // /~RAck<3>
	$vmx_define_export( test.top.cdsbus5[1], "99970"); // /~RAck<1>
	$vmx_define_export( test.top.cdsbus0[18], "99969"); // /~A<18>
	$vmx_define_export( test.top.cdsbus4[8], "99968"); // /~WriteData<8>
	$vmx_define_export( test.top.cdsbus4[5], "99967"); // /~WriteData<5>
	$vmx_define_import( test.top.mixedNet99966, "99966"); // /~ReadData<30>
	$vmx_define_import( test.top.mixedNet99965, "99965"); // /~WAck<6>
	$vmx_define_import( test.top.mixedNet99964, "99964"); // /~ReadData<2>
	$vmx_define_import( test.top.mixedNet99963, "99963"); // /~ReadData<1>
	$vmx_define_import( test.top.mixedNet99962, "99962"); // /~ReadData<0>
	$vmx_define_export( test.top.cdsbus0[19], "99961"); // /~A<19>
	$vmx_define_import( test.top.mixedNet99960, "99960"); // /~ReadData<24>
	$vmx_define_import( test.top.mixedNet99959, "99959"); // /net013<3>
	$vmx_define_export( test.top.cdsbus4[26], "99958"); // /~WriteData<26>
	$vmx_define_export( test.top.cdsbus4[14], "99957"); // /~WriteData<14>
	$vmx_define_import( test.top.mixedNet99956, "99956"); // /~ReadData<23>
	$vmx_define_export( test.top.cdsbus0[3], "99955"); // /~A<3>
	$vmx_define_import( test.top.mixedNet99954, "99954"); // /~ReadData<17>
	$vmx_define_import( test.top.mixedNet99953, "99953"); // /~ReadData<14>
	$vmx_define_export( test.top.cdsbus4[25], "99952"); // /~WriteData<25>
	$vmx_define_export( test.top.cdsbus4[10], "99951"); // /~WriteData<10>
	$vmx_define_export( test.top.cdsbus4[24], "99950"); // /~WriteData<24>
	$vmx_define_import( test.top.mixedNet99949, "99949"); // /~ReadData<27>
	$vmx_define_import( test.top.mixedNet99948, "99948"); // /~ReadData<5>
	$vmx_define_export( test.top.cdsbus4[4], "99947"); // /~WriteData<4>
	$vmx_define_import( test.top.mixedNet99946, "99946"); // /~ReadData<15>
	$vmx_define_export( test.top.cdsbus5[0], "99945"); // /~RAck<0>
	$vmx_define_import( test.top.mixedNet99944, "99944"); // /~WAck<2>
	$vmx_define_export( test.top.cdsbus4[7], "99943"); // /~WriteData<7>
	$vmx_define_import( test.top.mixedNet99942, "99942"); // /~ReadData<12>
	$vmx_define_export( test.top.cdsbus4[21], "99941"); // /~WriteData<21>
	$vmx_define_export( test.top.cdsbus4[11], "99940"); // /~WriteData<11>
	$vmx_define_export( test.top.cdsbus4[6], "99939"); // /~WriteData<6>
	$vmx_define_import( test.top.mixedNet99938, "99938"); // /~ReadData<10>
	$vmx_define_export( test.top.cdsbus4[30], "99937"); // /~WriteData<30>
	$vmx_define_import( test.top.mixedNet99936, "99936"); // /~ReadData<21>
	$vmx_define_export( test.top.cdsbus4[22], "99935"); // /~WriteData<22>
	$vmx_define_export( test.top.cdsbus5[6], "99934"); // /~RAck<6>
	$vmx_define_export( test.top.cdsbus4[20], "99933"); // /~WriteData<20>
	$vmx_define_import( test.top.mixedNet99932, "99932"); // /~ReadData<22>
	$vmx_define_export( test.top.cdsbus4[17], "99931"); // /~WriteData<17>
	$vmx_define_export( test.top.cdsbus4[28], "99930"); // /~WriteData<28>
	$vmx_define_import( test.top.mixedNet99929, "99929"); // /~ReadData<31>
	$vmx_define_import( test.top.mixedNet99928, "99928"); // /~ReadData<9>
	$vmx_define_export( test.top.cdsbus4[29], "99927"); // /~WriteData<29>
	$vmx_define_export( test.top.cdsbus5[4], "99926"); // /~RAck<4>
	$vmx_define_import( test.top.mixedNet99925, "99925"); // /~ReadData<4>
	$vmx_define_import( test.top.mixedNet99924, "99924"); // /~ReadData<3>
	$vmx_define_import( test.top.mixedNet99923, "99923"); // /~ReadData<13>
	$vmx_define_import( test.top.mixedNet99922, "99922"); // /~WAck<4>
	$vmx_define_export( test.top.cdsbus4[19], "99921"); // /~WriteData<19>
	$vmx_define_export( test.top.cdsbus0[8], "99920"); // /~A<8>
	$vmx_define_export( test.top.cdsbus0[13], "99919"); // /~A<13>
	$vmx_define_export( test.top.cdsbus4[16], "99918"); // /~WriteData<16>
	$vmx_define_import( test.top.mixedNet99917, "99917"); // /~Ack
	$vmx_define_export( test.top.cdsbus4[3], "99916"); // /~WriteData<3>
	$vmx_define_export( test.top.cdsbus5[7], "99915"); // /~RAck<7>
	$vmx_define_export( test.top.cdsbus4[1], "99914"); // /~WriteData<1>
	$vmx_define_export( test.top.cdsbus4[15], "99913"); // /~WriteData<15>
	$vmx_define_import( test.top.mixedNet99912, "99912"); // /~ReadData<29>
	$vmx_define_export( test.top.cdsbus4[23], "99911"); // /~WriteData<23>
	$vmx_define_export( test.top.cdsbus0[11], "99910"); // /~A<11>
	$vmx_define_export( test.top.cdsbus0[16], "99909"); // /~A<16>
	$vmx_define_export( test.top.cdsbus0[4], "99908"); // /~A<4>
	$vmx_define_import( test.top.mixedNet99907, "99907"); // /~WAck<0>
	$vmx_define_export( test.top.cdsbus0[7], "99906"); // /~A<7>
	$vmx_define_export( test.top.cdsbus0[1], "99905"); // /~A<1>
	$vmx_define_export( test.top.cdsbus0[6], "99904"); // /~A<6>
	$vmx_define_export( test.top.cdsbus0[5], "99903"); // /~A<5>
	$vmx_define_import( test.top.mixedNet99902, "99902"); // /~ReadData<26>
	$vmx_define_export( test.top.cdsbus1[0], "99901"); // /~RW<0>
	$vmx_define_export( test.top.cdsbus5[2], "99900"); // /~RAck<2>
	$vmx_define_import( test.top.mixedNet99899, "99899"); // /~ReadData<8>
	$vmx_define_import( test.top.mixedNet99898, "99898"); // /~ReadData<28>
	$vmx_define_import( test.top.mixedNet99897, "99897"); // /~WAck<7>
	$vmx_define_export( test.top.cdsbus4[2], "99896"); // /~WriteData<2>
	$vmx_define_import( test.top.mixedNet99895, "99895"); // /~ReadData<6>
	$vmx_define_export( test.top.cdsbus0[10], "99894"); // /~A<10>
	$vmx_define_export( test.top.cdsbus0[9], "99893"); // /~A<9>
	$vmx_define_import( test.top.mixedNet99892, "99892"); // /~ReadData<25>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.WriteDataAck[6], test.top.Ctrl_Ack[4], test.top.ReadData[8], test.top.ReadData[9], test.top.ReadData[10], test.top.A[1], test.top.WriteData[31], test.top.A[0], test.top.A[7], test.top.A[8], test.top.WriteDataAck[1], test.top.WriteDataAck[0], test.top.A[2], test.top.A[12], test.top.WriteDataAck[5], test.top.A[15], test.top.WriteData[2], test.top.ReadData[23], test.top.WriteDataAck[4], test.top.ReadData[28], test.top.ReadData[27], test.top.WriteData[29], test.top.ReadData[26], test.top.Ack, test.top.ReadData[2], test.top.ReadDataAck[1], test.top.WriteData[9], test.top.ReadData[29], test.top.ReadDataAck[3], test.top.A[11], test.top.A[10], test.top.ReadData[22], test.top.ReadDataAck[2], test.top.ReadDataAck[5], test.top.ReadDataAck[4], test.top.WriteDataAck[3], test.top.A[6], test.top.A[14], test.top.WriteDataAck[7], test.top.WriteData[19], test.top.WriteData[8], test.top.WriteData[12], test.top.ReadData[5], test.top.WriteData[11], test.top.WriteData[18], test.top.ReadData[15], test.top.ReadDataAck[7], 
test.top.ReadData[4], test.top.ReadData[7], test.top.WriteData[0], test.top.A[3], test.top.ReadDataAck[6], test.top.WriteData[6], test.top.ReadData[6], test.top.WriteData[28], test.top.ReadData[12], test.top.ReadData[16], test.top.ReadData[3], test.top.WriteData[15], test.top.ReadData[13], test.top.WriteData[27], test.top.WriteData[7], test.top.ReadData[25], test.top.A[9], test.top.Ctrl_Ack[3], test.top.A[4], test.top.A[13], test.top.WriteData[5], test.top.ReadData[24], test.top.WriteData[4], test.top.Ctrl_Ack[1], test.top.WriteData[26], test.top.WriteData[23], test.top.WriteDataAck[2], test.top.WriteData[3], test.top.ReadDataAck[0], test.top.WriteData[20], test.top.Ctrl_Ack[2], test.top.WriteData[30], test.top.WriteData[14], test.top.ReadData[18], test.top.RW[1], test.top.WriteData[16], test.top.A[5], test.top.ReadData[31], test.top.ReadData[11], test.top.WriteData[22], test.top.WriteData[21], test.top.ReadData[30], test.top.WriteData[1], test.top.WriteData[10], test.top.ReadData[19], 
test.top.ReadData[21], test.top.ReadData[20], test.top.WriteData[17], test.top.ReadData[17], test.top.RW[0], test.top.WriteData[25], test.top.A[18], test.top.WriteData[13], test.top.Ctrl_Ack[0], test.top.WriteData[24], test.top.A[19], test.top.A[17], test.top.ReadData[14], test.top.ReadData[1], test.top.ReadData[0], test.top.A[16], test.top.A[19:0], test.top.ReadDataAck[7:0], test.top.Ctrl_Ack[4:0], test.top.WriteData[31:0], test.top.RW[1:0], test.top.ReadData[31:0], test.top.WriteDataAck[7:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - 6T_BANK_Test, View - schematic
// LAST TIME SAVED: Apr 25 17:03:22 2015
// NETLIST TIME: Apr 25 17:27:56 2015
`timescale 1ps / 1ps 

module cdsModule_47 ( Ack, Ctrl_Ack, ReadData, WriteDataAck, A, RW,
     ReadDataAck, WriteData );

output  Ack;


output [4:0]  Ctrl_Ack;
output [7:0]  WriteDataAck;
output [31:0]  ReadData;

input [31:0]  WriteData;
input [7:0]  ReadDataAck;
input [19:0]  A;
input [1:0]  RW;

// Buses in the design

wire  [7:0]  WDataAckT;

wire  [0:4]  net013;

wire  [19:0]  cdsbus0;

wire  [1:0]  cdsbus1;

wire  [19:0]  AT;

wire  [31:0]  ReaDataT;

wire  [7:0]  ReadDataAckT;

wire  [31:0]  cdsbus2;

wire  [31:0]  WriteDataT;

wire  [1:0]  RWT;

wire  [7:0]  cdsbus3;

wire  [31:0]  cdsbus4;

wire  [7:0]  cdsbus5;

wire  [0:4]  net018;

// begin interface element definitions

wire cdsNet0;
reg mixedNet99999;
reg mixedNet99997;
reg mixedNet99996;
reg mixedNet99993;
reg mixedNet99992;
reg mixedNet99989;
reg mixedNet99988;
reg mixedNet99980;
reg mixedNet99979;
reg mixedNet99976;
reg mixedNet99975;
reg mixedNet99973;
reg mixedNet99972;
reg mixedNet99966;
reg mixedNet99965;
reg mixedNet99964;
reg mixedNet99963;
reg mixedNet99962;
reg mixedNet99960;
reg mixedNet99959;
reg mixedNet99956;
reg mixedNet99954;
reg mixedNet99953;
reg mixedNet99949;
reg mixedNet99948;
reg mixedNet99946;
reg mixedNet99944;
reg mixedNet99942;
reg mixedNet99938;
reg mixedNet99936;
reg mixedNet99932;
reg mixedNet99929;
reg mixedNet99928;
reg mixedNet99925;
reg mixedNet99924;
reg mixedNet99923;
reg mixedNet99922;
reg mixedNet99917;
reg mixedNet99912;
reg mixedNet99907;
reg mixedNet99902;
reg mixedNet99899;
reg mixedNet99898;
reg mixedNet99897;
reg mixedNet99895;
reg mixedNet99892;
assign net013[0] = mixedNet99999;
assign cdsbus2[11] = mixedNet99997;
assign cdsbus2[19] = mixedNet99996;
assign cdsbus2[18] = mixedNet99993;
assign net013[2] = mixedNet99992;
assign cdsbus2[7] = mixedNet99989;
assign cdsbus2[20] = mixedNet99988;
assign cdsbus3[1] = mixedNet99980;
assign cdsbus3[3] = mixedNet99979;
assign net013[4] = mixedNet99976;
assign cdsbus2[16] = mixedNet99975;
assign net013[1] = mixedNet99973;
assign cdsbus3[5] = mixedNet99972;
assign cdsbus2[30] = mixedNet99966;
assign cdsbus3[6] = mixedNet99965;
assign cdsbus2[2] = mixedNet99964;
assign cdsbus2[1] = mixedNet99963;
assign cdsbus2[0] = mixedNet99962;
assign cdsbus2[24] = mixedNet99960;
assign net013[3] = mixedNet99959;
assign cdsbus2[23] = mixedNet99956;
assign cdsbus2[17] = mixedNet99954;
assign cdsbus2[14] = mixedNet99953;
assign cdsbus2[27] = mixedNet99949;
assign cdsbus2[5] = mixedNet99948;
assign cdsbus2[15] = mixedNet99946;
assign cdsbus3[2] = mixedNet99944;
assign cdsbus2[12] = mixedNet99942;
assign cdsbus2[10] = mixedNet99938;
assign cdsbus2[21] = mixedNet99936;
assign cdsbus2[22] = mixedNet99932;
assign cdsbus2[31] = mixedNet99929;
assign cdsbus2[9] = mixedNet99928;
assign cdsbus2[4] = mixedNet99925;
assign cdsbus2[3] = mixedNet99924;
assign cdsbus2[13] = mixedNet99923;
assign cdsbus3[4] = mixedNet99922;
assign cdsNet0 = mixedNet99917;
assign cdsbus2[29] = mixedNet99912;
assign cdsbus3[0] = mixedNet99907;
assign cdsbus2[26] = mixedNet99902;
assign cdsbus2[8] = mixedNet99899;
assign cdsbus2[28] = mixedNet99898;
assign cdsbus3[7] = mixedNet99897;
assign cdsbus2[6] = mixedNet99895;
assign cdsbus2[25] = mixedNet99892;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "6T_BANK_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I18_4_ ( Ctrl_Ack[4], net013[0]);
inv_1xT I18_3_ ( Ctrl_Ack[3], net013[1]);
inv_1xT I18_2_ ( Ctrl_Ack[2], net013[2]);
inv_1xT I18_1_ ( Ctrl_Ack[1], net013[3]);
inv_1xT I18_0_ ( Ctrl_Ack[0], net013[4]);
inv_1xT I17 ( Ack, cdsNet0);
inv_1xT I4_31_ ( cdsbus4[31], WriteData[31]);
inv_1xT I4_30_ ( cdsbus4[30], WriteData[30]);
inv_1xT I4_29_ ( cdsbus4[29], WriteData[29]);
inv_1xT I4_28_ ( cdsbus4[28], WriteData[28]);
inv_1xT I4_27_ ( cdsbus4[27], WriteData[27]);
inv_1xT I4_26_ ( cdsbus4[26], WriteData[26]);
inv_1xT I4_25_ ( cdsbus4[25], WriteData[25]);
inv_1xT I4_24_ ( cdsbus4[24], WriteData[24]);
inv_1xT I4_23_ ( cdsbus4[23], WriteData[23]);
inv_1xT I4_22_ ( cdsbus4[22], WriteData[22]);
inv_1xT I4_21_ ( cdsbus4[21], WriteData[21]);
inv_1xT I4_20_ ( cdsbus4[20], WriteData[20]);
inv_1xT I4_19_ ( cdsbus4[19], WriteData[19]);
inv_1xT I4_18_ ( cdsbus4[18], WriteData[18]);
inv_1xT I4_17_ ( cdsbus4[17], WriteData[17]);
inv_1xT I4_16_ ( cdsbus4[16], WriteData[16]);
inv_1xT I4_15_ ( cdsbus4[15], WriteData[15]);
inv_1xT I4_14_ ( cdsbus4[14], WriteData[14]);
inv_1xT I4_13_ ( cdsbus4[13], WriteData[13]);
inv_1xT I4_12_ ( cdsbus4[12], WriteData[12]);
inv_1xT I4_11_ ( cdsbus4[11], WriteData[11]);
inv_1xT I4_10_ ( cdsbus4[10], WriteData[10]);
inv_1xT I4_9_ ( cdsbus4[9], WriteData[9]);
inv_1xT I4_8_ ( cdsbus4[8], WriteData[8]);
inv_1xT I4_7_ ( cdsbus4[7], WriteData[7]);
inv_1xT I4_6_ ( cdsbus4[6], WriteData[6]);
inv_1xT I4_5_ ( cdsbus4[5], WriteData[5]);
inv_1xT I4_4_ ( cdsbus4[4], WriteData[4]);
inv_1xT I4_3_ ( cdsbus4[3], WriteData[3]);
inv_1xT I4_2_ ( cdsbus4[2], WriteData[2]);
inv_1xT I4_1_ ( cdsbus4[1], WriteData[1]);
inv_1xT I4_0_ ( cdsbus4[0], WriteData[0]);
inv_1xT I7_31_ ( ReadData[31], cdsbus2[31]);
inv_1xT I7_30_ ( ReadData[30], cdsbus2[30]);
inv_1xT I7_29_ ( ReadData[29], cdsbus2[29]);
inv_1xT I7_28_ ( ReadData[28], cdsbus2[28]);
inv_1xT I7_27_ ( ReadData[27], cdsbus2[27]);
inv_1xT I7_26_ ( ReadData[26], cdsbus2[26]);
inv_1xT I7_25_ ( ReadData[25], cdsbus2[25]);
inv_1xT I7_24_ ( ReadData[24], cdsbus2[24]);
inv_1xT I7_23_ ( ReadData[23], cdsbus2[23]);
inv_1xT I7_22_ ( ReadData[22], cdsbus2[22]);
inv_1xT I7_21_ ( ReadData[21], cdsbus2[21]);
inv_1xT I7_20_ ( ReadData[20], cdsbus2[20]);
inv_1xT I7_19_ ( ReadData[19], cdsbus2[19]);
inv_1xT I7_18_ ( ReadData[18], cdsbus2[18]);
inv_1xT I7_17_ ( ReadData[17], cdsbus2[17]);
inv_1xT I7_16_ ( ReadData[16], cdsbus2[16]);
inv_1xT I7_15_ ( ReadData[15], cdsbus2[15]);
inv_1xT I7_14_ ( ReadData[14], cdsbus2[14]);
inv_1xT I7_13_ ( ReadData[13], cdsbus2[13]);
inv_1xT I7_12_ ( ReadData[12], cdsbus2[12]);
inv_1xT I7_11_ ( ReadData[11], cdsbus2[11]);
inv_1xT I7_10_ ( ReadData[10], cdsbus2[10]);
inv_1xT I7_9_ ( ReadData[9], cdsbus2[9]);
inv_1xT I7_8_ ( ReadData[8], cdsbus2[8]);
inv_1xT I7_7_ ( ReadData[7], cdsbus2[7]);
inv_1xT I7_6_ ( ReadData[6], cdsbus2[6]);
inv_1xT I7_5_ ( ReadData[5], cdsbus2[5]);
inv_1xT I7_4_ ( ReadData[4], cdsbus2[4]);
inv_1xT I7_3_ ( ReadData[3], cdsbus2[3]);
inv_1xT I7_2_ ( ReadData[2], cdsbus2[2]);
inv_1xT I7_1_ ( ReadData[1], cdsbus2[1]);
inv_1xT I7_0_ ( ReadData[0], cdsbus2[0]);
inv_1xT I9_7_ ( WriteDataAck[7], cdsbus3[7]);
inv_1xT I9_6_ ( WriteDataAck[6], cdsbus3[6]);
inv_1xT I9_5_ ( WriteDataAck[5], cdsbus3[5]);
inv_1xT I9_4_ ( WriteDataAck[4], cdsbus3[4]);
inv_1xT I9_3_ ( WriteDataAck[3], cdsbus3[3]);
inv_1xT I9_2_ ( WriteDataAck[2], cdsbus3[2]);
inv_1xT I9_1_ ( WriteDataAck[1], cdsbus3[1]);
inv_1xT I9_0_ ( WriteDataAck[0], cdsbus3[0]);
inv_1xT I12_7_ ( cdsbus5[7], ReadDataAck[7]);
inv_1xT I12_6_ ( cdsbus5[6], ReadDataAck[6]);
inv_1xT I12_5_ ( cdsbus5[5], ReadDataAck[5]);
inv_1xT I12_4_ ( cdsbus5[4], ReadDataAck[4]);
inv_1xT I12_3_ ( cdsbus5[3], ReadDataAck[3]);
inv_1xT I12_2_ ( cdsbus5[2], ReadDataAck[2]);
inv_1xT I12_1_ ( cdsbus5[1], ReadDataAck[1]);
inv_1xT I12_0_ ( cdsbus5[0], ReadDataAck[0]);
inv_1xT I20_1_ ( cdsbus1[1], RW[1]);
inv_1xT I20_0_ ( cdsbus1[0], RW[0]);
inv_1xT I19_19_ ( cdsbus0[19], A[19]);
inv_1xT I19_18_ ( cdsbus0[18], A[18]);
inv_1xT I19_17_ ( cdsbus0[17], A[17]);
inv_1xT I19_16_ ( cdsbus0[16], A[16]);
inv_1xT I19_15_ ( cdsbus0[15], A[15]);
inv_1xT I19_14_ ( cdsbus0[14], A[14]);
inv_1xT I19_13_ ( cdsbus0[13], A[13]);
inv_1xT I19_12_ ( cdsbus0[12], A[12]);
inv_1xT I19_11_ ( cdsbus0[11], A[11]);
inv_1xT I19_10_ ( cdsbus0[10], A[10]);
inv_1xT I19_9_ ( cdsbus0[9], A[9]);
inv_1xT I19_8_ ( cdsbus0[8], A[8]);
inv_1xT I19_7_ ( cdsbus0[7], A[7]);
inv_1xT I19_6_ ( cdsbus0[6], A[6]);
inv_1xT I19_5_ ( cdsbus0[5], A[5]);
inv_1xT I19_4_ ( cdsbus0[4], A[4]);
inv_1xT I19_3_ ( cdsbus0[3], A[3]);
inv_1xT I19_2_ ( cdsbus0[2], A[2]);
inv_1xT I19_1_ ( cdsbus0[1], A[1]);
inv_1xT I19_0_ ( cdsbus0[0], A[0]);

endmodule
