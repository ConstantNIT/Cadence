
`timescale 1ps / 1ps

module test;


wire  Req, df, dt;

reg  cf, ct;

wire [31:0]  st;
wire [31:0]  sf;

reg [31:0]  at;
reg [31:0]  bf;
reg [31:0]  af;
reg [31:0]  bt;
integer dc_mode_flag;
integer output_change_count;
integer max_dc_iter;
integer dc_iterations;
time vmx_time_offset;




Martin32_Test top(Req, df, dt, sf, st, af, at, bf, bt, cf, ct); 
 

`define verimix
`ifdef verimix

  //Parasitic Simulation annotate definitions
  `include "annotate_msb"

  //vms and dc iteration loop definitions
  `include "IE.verimix"

  //please enter any additional stimulus in the testfixture.verimix file
  `include "testfixture.verimix"

  //$save_waveform definitions
  `include "saveDefs"

`endif


endmodule 
// Vermix stimulus outfile.
// Default verimix stimulus.
integer outfile;
integer seed;

integer i;
real start;
real delay;

initial begin
	seed=5;
	outfile=$fopen({"/tmp2/Martin32_v",".csv"});

	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;	
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;



#500 //wait 2ns, measure leakage

//all false
	start=$time;
	at[31:0] = 32'h00000000; af[31:0] = ~at[31:0];
	bt[31:0] = 32'h00000000; bf[31:0] = ~bt[31:0];
	ct = 1'b0; cf=~ct;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;	
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//alltrue
	start=$time;
	at[31:0] = 32'hffffffff; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hffffffff; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//fffffffe + ci
	at[31:0] = 32'hfffffffe; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hfffffffe; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//AA+55+ci
	at[31:0] = 32'hAAAAAAAA; af[31:0] = ~at[31:0];
	bt[31:0] = 32'h55555555; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//555+555 + ci
	at[31:0] = 32'h55555555; af[31:0] = ~at[31:0];
	bt[31:0] = 32'h55555555; bf[31:0] = ~bt[31:0];
	ct = 1'b0; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//AA+AA+ci
	at[31:0] = 32'hAAAAAAAA; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hAAAAAAAA; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//fffe + fffe +ci
	at[31:0] = 32'hfffffffe; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hfffffffe; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	// all true
	at[31:0] = 32'hffffffff; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hffffffff; bf[31:0] = ~bt[31:0];
	ct = 1'b0; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//55+55+ci
	at[31:0] = 32'h55555555; af[31:0] = ~at[31:0];
	bt[31:0] = 32'h55555555; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//AA+AA
	at[31:0] = 32'hAAAAAAAA; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hAAAAAAAA; bf[31:0] = ~bt[31:0];
	ct = 1'b0; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	// 55 + AA + ci
	at[31:0] = 32'h55555555; af[31:0] = ~at[31:0];
	bt[31:0] = 32'hAAAAAAAA; bf[31:0] = ~bt[31:0];
	ct = 1'b1; cf=~ct;
	start=$time;
	wait(Req);
	delay = $time - start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
	//null
	af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
	bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
	cf = 1'b0; ct = 1'b0;
	start=$time;
	wait(~Req);
	delay=$time-start;
	$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);

	//main loop
//	repeat (1000) begin
//		at[31:0] = $random(seed); af[31:0] = ~at[31:0];
//		bt[31:0] = $random; bf[31:0] = ~bt[31:0];
//		ct = $random; cf=~ct;
//		start=$time; wait(Req);
//		delay = $time - start;
//		$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
//		af[31:0] = 32'h00000000; at[31:0] = 32'h00000000;
//		bf[31:0] = 32'h00000000; bt[31:0] = 32'h00000000;
//		cf = 1'b0; ct = 1'b0;
//		start=$time; wait(~Req); delay=$time-start;
//		$fdisplay(outfile, "%h, %h, %h, %h, %b, %b, %h, %h, %b, %b, %t %t", at, af, bt, bf, ct, cf, st, sf, dt, df, $time, delay);
//	end
	$finish;
end

`define _VMX_SIMULATOR_NAME_ "spectre"
`define _VMX_MAX_DC_ITER_ 0
`define _VMX_DC_INTERVAL_ 0
`include "simOptions.verimix"

// Begin Interface Element Header and Verimix Synchronization task
initial begin
	$vmx_initialize( `_VMX_SIMULATOR_NAME_ , dc_mode_flag);
	$vmx_define_import( test.top.mixedNet99999, "99999"); // /stBar<15>
	$vmx_define_export( test.top.atBar[15], "99998"); // /atBar<15>
	$vmx_define_export( test.top.bfBar[31], "99997"); // /bfBar<31>
	$vmx_define_export( test.top.afBar[21], "99996"); // /afBar<21>
	$vmx_define_import( test.top.mixedNet99995, "99995"); // /stBar<26>
	$vmx_define_import( test.top.mixedNet99994, "99994"); // /stBar<25>
	$vmx_define_export( test.top.atBar[12], "99993"); // /atBar<12>
	$vmx_define_export( test.top.afBar[20], "99992"); // /afBar<20>
	$vmx_define_export( test.top.bfBar[29], "99991"); // /bfBar<29>
	$vmx_define_export( test.top.atBar[11], "99990"); // /atBar<11>
	$vmx_define_import( test.top.mixedNet99989, "99989"); // /sfBar<23>
	$vmx_define_import( test.top.mixedNet99988, "99988"); // /stBar<7>
	$vmx_define_export( test.top.btBar[30], "99987"); // /btBar<30>
	$vmx_define_export( test.top.bfBar[28], "99986"); // /bfBar<28>
	$vmx_define_import( test.top.mixedNet99985, "99985"); // /sfBar<7>
	$vmx_define_export( test.top.atBar[5], "99984"); // /atBar<5>
	$vmx_define_import( test.top.mixedNet99983, "99983"); // /sfBar<4>
	$vmx_define_import( test.top.mixedNet99982, "99982"); // /stBar<12>
	$vmx_define_import( test.top.mixedNet99981, "99981"); // /sfBar<24>
	$vmx_define_export( test.top.btBar[25], "99980"); // /btBar<25>
	$vmx_define_export( test.top.atBar[7], "99979"); // /atBar<7>
	$vmx_define_export( test.top.afBar[23], "99978"); // /afBar<23>
	$vmx_define_import( test.top.mixedNet99977, "99977"); // /sfBar<6>
	$vmx_define_export( test.top.btBar[27], "99976"); // /btBar<27>
	$vmx_define_export( test.top.btBar[21], "99975"); // /btBar<21>
	$vmx_define_import( test.top.mixedNet99974, "99974"); // /sfBar<29>
	$vmx_define_export( test.top.afBar[22], "99973"); // /afBar<22>
	$vmx_define_export( test.top.btBar[26], "99972"); // /btBar<26>
	$vmx_define_import( test.top.mixedNet99971, "99971"); // /stBar<10>
	$vmx_define_export( test.top.btBar[20], "99970"); // /btBar<20>
	$vmx_define_import( test.top.mixedNet99969, "99969"); // /sfBar<5>
	$vmx_define_export( test.top.bfBar[16], "99968"); // /bfBar<16>
	$vmx_define_export( test.top.bfBar[24], "99967"); // /bfBar<24>
	$vmx_define_export( test.top.bfBar[22], "99966"); // /bfBar<22>
	$vmx_define_export( test.top.bfBar[21], "99965"); // /bfBar<21>
	$vmx_define_import( test.top.mixedNet99964, "99964"); // /sfBar<21>
	$vmx_define_import( test.top.mixedNet99963, "99963"); // /stBar<14>
	$vmx_define_import( test.top.mixedNet99962, "99962"); // /stBar<13>
	$vmx_define_export( test.top.bfBar[20], "99961"); // /bfBar<20>
	$vmx_define_export( test.top.bfBar[19], "99960"); // /bfBar<19>
	$vmx_define_import( test.top.mixedNet99959, "99959"); // /dfBar
	$vmx_define_export( test.top.afBar[11], "99958"); // /afBar<11>
	$vmx_define_import( test.top.mixedNet99957, "99957"); // /ReqBar
	$vmx_define_import( test.top.mixedNet99956, "99956"); // /stBar<28>
	$vmx_define_import( test.top.mixedNet99955, "99955"); // /stBar<29>
	$vmx_define_import( test.top.mixedNet99954, "99954"); // /sfBar<27>
	$vmx_define_export( test.top.atBar[19], "99953"); // /atBar<19>
	$vmx_define_export( test.top.afBar[16], "99952"); // /afBar<16>
	$vmx_define_import( test.top.mixedNet99951, "99951"); // /stBar<11>
	$vmx_define_export( test.top.atBar[21], "99950"); // /atBar<21>
	$vmx_define_export( test.top.afBar[15], "99949"); // /afBar<15>
	$vmx_define_export( test.top.atBar[14], "99948"); // /atBar<14>
	$vmx_define_import( test.top.mixedNet99947, "99947"); // /stBar<1>
	$vmx_define_export( test.top.afBar[30], "99946"); // /afBar<30>
	$vmx_define_import( test.top.mixedNet99945, "99945"); // /sfBar<17>
	$vmx_define_export( test.top.btBar[9], "99944"); // /btBar<9>
	$vmx_define_export( test.top.btBar[10], "99943"); // /btBar<10>
	$vmx_define_import( test.top.mixedNet99942, "99942"); // /sfBar<28>
	$vmx_define_import( test.top.mixedNet99941, "99941"); // /stBar<0>
	$vmx_define_export( test.top.cfBar, "99940"); // /cfBar
	$vmx_define_import( test.top.mixedNet99939, "99939"); // /sfBar<31>
	$vmx_define_export( test.top.afBar[31], "99938"); // /afBar<31>
	$vmx_define_export( test.top.bfBar[15], "99937"); // /bfBar<15>
	$vmx_define_export( test.top.bfBar[14], "99936"); // /bfBar<14>
	$vmx_define_export( test.top.btBar[11], "99935"); // /btBar<11>
	$vmx_define_export( test.top.ctBar, "99934"); // /ctBar
	$vmx_define_import( test.top.mixedNet99933, "99933"); // /sfBar<20>
	$vmx_define_import( test.top.mixedNet99932, "99932"); // /sfBar<19>
	$vmx_define_export( test.top.afBar[10], "99931"); // /afBar<10>
	$vmx_define_export( test.top.afBar[9], "99930"); // /afBar<9>
	$vmx_define_export( test.top.afBar[8], "99929"); // /afBar<8>
	$vmx_define_export( test.top.bfBar[6], "99928"); // /bfBar<6>
	$vmx_define_export( test.top.afBar[7], "99927"); // /afBar<7>
	$vmx_define_export( test.top.atBar[30], "99926"); // /atBar<30>
	$vmx_define_export( test.top.afBar[28], "99925"); // /afBar<28>
	$vmx_define_export( test.top.afBar[17], "99924"); // /afBar<17>
	$vmx_define_export( test.top.btBar[13], "99923"); // /btBar<13>
	$vmx_define_export( test.top.afBar[27], "99922"); // /afBar<27>
	$vmx_define_export( test.top.afBar[29], "99921"); // /afBar<29>
	$vmx_define_export( test.top.btBar[12], "99920"); // /btBar<12>
	$vmx_define_export( test.top.btBar[28], "99919"); // /btBar<28>
	$vmx_define_export( test.top.btBar[29], "99918"); // /btBar<29>
	$vmx_define_export( test.top.afBar[25], "99917"); // /afBar<25>
	$vmx_define_export( test.top.atBar[28], "99916"); // /atBar<28>
	$vmx_define_export( test.top.atBar[22], "99915"); // /atBar<22>
	$vmx_define_export( test.top.atBar[23], "99914"); // /atBar<23>
	$vmx_define_export( test.top.bfBar[13], "99913"); // /bfBar<13>
	$vmx_define_export( test.top.bfBar[12], "99912"); // /bfBar<12>
	$vmx_define_export( test.top.bfBar[11], "99911"); // /bfBar<11>
	$vmx_define_import( test.top.mixedNet99910, "99910"); // /sfBar<8>
	$vmx_define_export( test.top.afBar[24], "99909"); // /afBar<24>
	$vmx_define_export( test.top.bfBar[10], "99908"); // /bfBar<10>
	$vmx_define_export( test.top.btBar[19], "99907"); // /btBar<19>
	$vmx_define_import( test.top.mixedNet99906, "99906"); // /sfBar<30>
	$vmx_define_export( test.top.bfBar[9], "99905"); // /bfBar<9>
	$vmx_define_import( test.top.mixedNet99904, "99904"); // /stBar<24>
	$vmx_define_export( test.top.bfBar[18], "99903"); // /bfBar<18>
	$vmx_define_export( test.top.bfBar[17], "99902"); // /bfBar<17>
	$vmx_define_export( test.top.afBar[6], "99901"); // /afBar<6>
	$vmx_define_export( test.top.afBar[5], "99900"); // /afBar<5>
	$vmx_define_export( test.top.atBar[10], "99899"); // /atBar<10>
	$vmx_define_export( test.top.atBar[9], "99898"); // /atBar<9>
	$vmx_define_export( test.top.atBar[6], "99897"); // /atBar<6>
	$vmx_define_export( test.top.atBar[29], "99896"); // /atBar<29>
	$vmx_define_import( test.top.mixedNet99895, "99895"); // /sfBar<16>
	$vmx_define_export( test.top.bfBar[8], "99894"); // /bfBar<8>
	$vmx_define_export( test.top.afBar[4], "99893"); // /afBar<4>
	$vmx_define_import( test.top.mixedNet99892, "99892"); // /sfBar<22>
	$vmx_define_export( test.top.afBar[18], "99891"); // /afBar<18>
	$vmx_define_export( test.top.afBar[19], "99890"); // /afBar<19>
	$vmx_define_export( test.top.bfBar[0], "99889"); // /bfBar<0>
	$vmx_define_export( test.top.afBar[26], "99888"); // /afBar<26>
	$vmx_define_import( test.top.mixedNet99887, "99887"); // /dtBar
	$vmx_define_import( test.top.mixedNet99886, "99886"); // /stBar<23>
	$vmx_define_import( test.top.mixedNet99885, "99885"); // /sfBar<1>
	$vmx_define_export( test.top.btBar[18], "99884"); // /btBar<18>
	$vmx_define_export( test.top.btBar[24], "99883"); // /btBar<24>
	$vmx_define_import( test.top.mixedNet99882, "99882"); // /stBar<31>
	$vmx_define_import( test.top.mixedNet99881, "99881"); // /stBar<30>
	$vmx_define_import( test.top.mixedNet99880, "99880"); // /sfBar<15>
	$vmx_define_import( test.top.mixedNet99879, "99879"); // /sfBar<14>
	$vmx_define_export( test.top.btBar[17], "99878"); // /btBar<17>
	$vmx_define_import( test.top.mixedNet99877, "99877"); // /sfBar<18>
	$vmx_define_import( test.top.mixedNet99876, "99876"); // /sfBar<0>
	$vmx_define_import( test.top.mixedNet99875, "99875"); // /stBar<22>
	$vmx_define_export( test.top.btBar[0], "99874"); // /btBar<0>
	$vmx_define_export( test.top.bfBar[2], "99873"); // /bfBar<2>
	$vmx_define_export( test.top.btBar[6], "99872"); // /btBar<6>
	$vmx_define_export( test.top.btBar[16], "99871"); // /btBar<16>
	$vmx_define_export( test.top.bfBar[3], "99870"); // /bfBar<3>
	$vmx_define_import( test.top.mixedNet99869, "99869"); // /sfBar<3>
	$vmx_define_export( test.top.atBar[27], "99868"); // /atBar<27>
	$vmx_define_export( test.top.atBar[26], "99867"); // /atBar<26>
	$vmx_define_import( test.top.mixedNet99866, "99866"); // /stBar<18>
	$vmx_define_export( test.top.atBar[13], "99865"); // /atBar<13>
	$vmx_define_import( test.top.mixedNet99864, "99864"); // /stBar<17>
	$vmx_define_export( test.top.bfBar[5], "99863"); // /bfBar<5>
	$vmx_define_export( test.top.btBar[15], "99862"); // /btBar<15>
	$vmx_define_export( test.top.btBar[3], "99861"); // /btBar<3>
	$vmx_define_export( test.top.bfBar[4], "99860"); // /bfBar<4>
	$vmx_define_export( test.top.atBar[16], "99859"); // /atBar<16>
	$vmx_define_export( test.top.btBar[14], "99858"); // /btBar<14>
	$vmx_define_export( test.top.afBar[14], "99857"); // /afBar<14>
	$vmx_define_import( test.top.mixedNet99856, "99856"); // /stBar<16>
	$vmx_define_import( test.top.mixedNet99855, "99855"); // /sfBar<2>
	$vmx_define_export( test.top.btBar[5], "99854"); // /btBar<5>
	$vmx_define_export( test.top.atBar[17], "99853"); // /atBar<17>
	$vmx_define_export( test.top.atBar[25], "99852"); // /atBar<25>
	$vmx_define_import( test.top.mixedNet99851, "99851"); // /sfBar<11>
	$vmx_define_export( test.top.bfBar[23], "99850"); // /bfBar<23>
	$vmx_define_export( test.top.btBar[4], "99849"); // /btBar<4>
	$vmx_define_export( test.top.btBar[23], "99848"); // /btBar<23>
	$vmx_define_export( test.top.atBar[20], "99847"); // /atBar<20>
	$vmx_define_import( test.top.mixedNet99846, "99846"); // /stBar<6>
	$vmx_define_import( test.top.mixedNet99845, "99845"); // /sfBar<13>
	$vmx_define_export( test.top.afBar[3], "99844"); // /afBar<3>
	$vmx_define_export( test.top.afBar[2], "99843"); // /afBar<2>
	$vmx_define_import( test.top.mixedNet99842, "99842"); // /sfBar<10>
	$vmx_define_export( test.top.btBar[8], "99841"); // /btBar<8>
	$vmx_define_export( test.top.btBar[7], "99840"); // /btBar<7>
	$vmx_define_import( test.top.mixedNet99839, "99839"); // /stBar<5>
	$vmx_define_import( test.top.mixedNet99838, "99838"); // /stBar<4>
	$vmx_define_import( test.top.mixedNet99837, "99837"); // /stBar<3>
	$vmx_define_export( test.top.afBar[1], "99836"); // /afBar<1>
	$vmx_define_export( test.top.atBar[8], "99835"); // /atBar<8>
	$vmx_define_import( test.top.mixedNet99834, "99834"); // /sfBar<26>
	$vmx_define_import( test.top.mixedNet99833, "99833"); // /stBar<27>
	$vmx_define_export( test.top.afBar[13], "99832"); // /afBar<13>
	$vmx_define_export( test.top.bfBar[7], "99831"); // /bfBar<7>
	$vmx_define_export( test.top.atBar[4], "99830"); // /atBar<4>
	$vmx_define_import( test.top.mixedNet99829, "99829"); // /stBar<2>
	$vmx_define_export( test.top.atBar[18], "99828"); // /atBar<18>
	$vmx_define_export( test.top.afBar[12], "99827"); // /afBar<12>
	$vmx_define_export( test.top.bfBar[27], "99826"); // /bfBar<27>
	$vmx_define_import( test.top.mixedNet99825, "99825"); // /sfBar<25>
	$vmx_define_export( test.top.atBar[3], "99824"); // /atBar<3>
	$vmx_define_export( test.top.bfBar[26], "99823"); // /bfBar<26>
	$vmx_define_export( test.top.bfBar[25], "99822"); // /bfBar<25>
	$vmx_define_export( test.top.atBar[2], "99821"); // /atBar<2>
	$vmx_define_export( test.top.atBar[24], "99820"); // /atBar<24>
	$vmx_define_import( test.top.mixedNet99819, "99819"); // /sfBar<9>
	$vmx_define_export( test.top.btBar[2], "99818"); // /btBar<2>
	$vmx_define_export( test.top.btBar[1], "99817"); // /btBar<1>
	$vmx_define_import( test.top.mixedNet99816, "99816"); // /stBar<21>
	$vmx_define_import( test.top.mixedNet99815, "99815"); // /stBar<20>
	$vmx_define_import( test.top.mixedNet99814, "99814"); // /stBar<19>
	$vmx_define_import( test.top.mixedNet99813, "99813"); // /sfBar<12>
	$vmx_define_export( test.top.atBar[1], "99812"); // /atBar<1>
	$vmx_define_export( test.top.bfBar[30], "99811"); // /bfBar<30>
	$vmx_define_import( test.top.mixedNet99810, "99810"); // /stBar<9>
	$vmx_define_export( test.top.btBar[22], "99809"); // /btBar<22>
	$vmx_define_export( test.top.atBar[0], "99808"); // /atBar<0>
	$vmx_define_import( test.top.mixedNet99807, "99807"); // /stBar<8>
	$vmx_define_export( test.top.afBar[0], "99806"); // /afBar<0>
	$vmx_define_export( test.top.btBar[31], "99805"); // /btBar<31>
	$vmx_define_export( test.top.atBar[31], "99804"); // /atBar<31>
	$vmx_define_export( test.top.bfBar[1], "99803"); // /bfBar<1>
	$vmx_end_definition;
	vmx_time_offset = 0;
	max_dc_iter = `_VMX_MAX_DC_ITER_ ;
	dc_mode_flag = 1;
	$vmx_start_sim( `_VMX_SIMULATOR_NAME_ );
	dc_iterations = 0;
	while(dc_mode_flag !=  0)
	begin
		# `_VMX_DC_INTERVAL_ $vmx_do_dc( `_VMX_SIMULATOR_NAME_ ,
output_change_count);
		dc_iterations = (dc_iterations + 1);
		if( (output_change_count == 0) ||  (dc_iterations >= max_dc_iter) )
		begin
			dc_mode_flag = 0;
			vmx_time_offset = $time;
		end
	end
end
// End Interface Element Footer and Verimix Synchronization task
initial begin
end

`include "dataDirPath"
// Begin SST2 Save Waveforms
initial begin
$shm_open(`_VMX_DATA_PATH_);
$shm_probe(test.top.cf, test.top.Req, test.top.st[23], test.top.st[22], test.top.st[21], test.top.st[20], test.top.st[19], test.top.af[25], test.top.bt[26], test.top.sf[31], test.top.at[31], test.top.bf[9], test.top.bf[8], test.top.st[14], test.top.st[13], test.top.dt, test.top.bt[8], test.top.bt[23], test.top.bf[23], test.top.at[8], test.top.at[7], test.top.bf[17], test.top.bf[18], test.top.at[30], test.top.af[2], test.top.af[23], test.top.df, test.top.ct, test.top.at[6], test.top.af[20], test.top.af[19], test.top.af[21], test.top.bt[22], test.top.bf[4], test.top.bf[22], test.top.sf[27], test.top.af[22], test.top.sf[26], test.top.sf[25], test.top.at[21], test.top.at[22], test.top.bt[24], test.top.af[1], test.top.sf[24], test.top.st[28], test.top.at[0], test.top.sf[23], test.top.st[31], test.top.st[30], test.top.at[1], test.top.af[26], test.top.st[4], test.top.sf[4], test.top.st[26], test.top.st[3], test.top.bt[31], test.top.sf[5], test.top.sf[6], test.top.at[13], test.top.bt[25], test.top.bt[30], 
test.top.bt[4], test.top.st[25], test.top.sf[12], test.top.bt[20], test.top.bf[27], test.top.st[0], test.top.st[8], test.top.bf[28], test.top.bt[27], test.top.sf[11], test.top.at[11], test.top.bt[5], test.top.bf[26], test.top.af[27], test.top.bt[28], test.top.bt[12], test.top.bf[14], test.top.st[27], test.top.sf[10], test.top.bt[7], test.top.bf[19], test.top.at[10], test.top.at[9], test.top.bf[13], test.top.bf[12], test.top.bt[21], test.top.bf[24], test.top.st[17], test.top.af[28], test.top.bt[6], test.top.bf[15], test.top.af[12], test.top.sf[3], test.top.sf[9], test.top.bf[11], test.top.bf[10], test.top.bf[25], test.top.sf[0], test.top.sf[1], test.top.sf[2], test.top.sf[8], test.top.af[7], test.top.af[8], test.top.sf[16], test.top.sf[17], test.top.sf[18], test.top.sf[19], test.top.sf[20], test.top.at[14], test.top.at[15], test.top.at[26], test.top.at[25], test.top.bf[31], test.top.af[10], test.top.sf[13], test.top.sf[14], test.top.af[6], test.top.at[24], test.top.st[11], test.top.at[23], 
test.top.bf[29], test.top.bf[30], test.top.st[6], test.top.af[0], test.top.bf[3], test.top.bf[20], test.top.bf[21], test.top.af[9], test.top.af[11], test.top.sf[22], test.top.af[17], test.top.bt[9], test.top.bt[11], test.top.bf[2], test.top.bt[13], test.top.st[7], test.top.at[19], test.top.st[5], test.top.st[10], test.top.st[9], test.top.bf[7], test.top.sf[21], test.top.at[20], test.top.af[16], test.top.af[15], test.top.at[5], test.top.at[4], test.top.at[3], test.top.at[28], test.top.at[27], test.top.sf[30], test.top.st[16], test.top.af[14], test.top.st[15], test.top.af[13], test.top.at[18], test.top.bt[19], test.top.bt[1], test.top.st[24], test.top.at[17], test.top.bf[16], test.top.af[24], test.top.bt[0], test.top.at[16], test.top.af[3], test.top.bt[17], test.top.af[30], test.top.sf[29], test.top.af[5], test.top.at[29], test.top.at[12], test.top.bt[29], test.top.bt[3], test.top.bt[2], test.top.sf[15], test.top.bt[14], test.top.af[29], test.top.st[2], test.top.st[29], test.top.bf[6], test.top.af[18], 
test.top.bf[5], test.top.st[12], test.top.bf[1], test.top.bf[0], test.top.bt[16], test.top.st[1], test.top.af[31], test.top.sf[28], test.top.bt[15], test.top.bt[10], test.top.at[2], test.top.bt[18], test.top.af[4], test.top.sf[7], test.top.st[18], test.top.st[31:0], test.top.bf[31:0], test.top.bt[31:0], test.top.sf[31:0], test.top.at[31:0], test.top.af[31:0]);
end
// End SST2 Save Waveforms
// Library - 16nm_Tests, Cell - Martin32_Test, View - schematic
// LAST TIME SAVED: Apr 21 19:52:27 2015
// NETLIST TIME: Apr 21 19:52:47 2015
`timescale 1ps / 1ps 

module Martin32_Test ( Req, df, dt, sf, st, af, at, bf, bt, cf, ct );

output  Req, df, dt;

input  cf, ct;

output [31:0]  st;
output [31:0]  sf;

input [31:0]  at;
input [31:0]  bf;
input [31:0]  af;
input [31:0]  bt;

// Buses in the design

wire  [31:0]  stT;

wire  [31:0]  sfT;

wire  [31:0]  sfBar;

wire  [31:0]  stBar;

wire  [31:0]  btT;

wire  [31:0]  bfT;

wire  [31:0]  atT;

wire  [31:0]  afT;

wire  [31:0]  btBar;

wire  [31:0]  bfBar;

wire  [31:0]  atBar;

wire  [31:0]  afBar;

// begin interface element definitions

wire dfBar;
wire ReqBar;
wire dtBar;
reg mixedNet99999;
reg mixedNet99995;
reg mixedNet99994;
reg mixedNet99989;
reg mixedNet99988;
reg mixedNet99985;
reg mixedNet99983;
reg mixedNet99982;
reg mixedNet99981;
reg mixedNet99977;
reg mixedNet99974;
reg mixedNet99971;
reg mixedNet99969;
reg mixedNet99964;
reg mixedNet99963;
reg mixedNet99962;
reg mixedNet99959;
reg mixedNet99957;
reg mixedNet99956;
reg mixedNet99955;
reg mixedNet99954;
reg mixedNet99951;
reg mixedNet99947;
reg mixedNet99945;
reg mixedNet99942;
reg mixedNet99941;
reg mixedNet99939;
reg mixedNet99933;
reg mixedNet99932;
reg mixedNet99910;
reg mixedNet99906;
reg mixedNet99904;
reg mixedNet99895;
reg mixedNet99892;
reg mixedNet99887;
reg mixedNet99886;
reg mixedNet99885;
reg mixedNet99882;
reg mixedNet99881;
reg mixedNet99880;
reg mixedNet99879;
reg mixedNet99877;
reg mixedNet99876;
reg mixedNet99875;
reg mixedNet99869;
reg mixedNet99866;
reg mixedNet99864;
reg mixedNet99856;
reg mixedNet99855;
reg mixedNet99851;
reg mixedNet99846;
reg mixedNet99845;
reg mixedNet99842;
reg mixedNet99839;
reg mixedNet99838;
reg mixedNet99837;
reg mixedNet99834;
reg mixedNet99833;
reg mixedNet99829;
reg mixedNet99825;
reg mixedNet99819;
reg mixedNet99816;
reg mixedNet99815;
reg mixedNet99814;
reg mixedNet99813;
reg mixedNet99810;
reg mixedNet99807;
assign stBar[15] = mixedNet99999;
assign stBar[26] = mixedNet99995;
assign stBar[25] = mixedNet99994;
assign sfBar[23] = mixedNet99989;
assign stBar[7] = mixedNet99988;
assign sfBar[7] = mixedNet99985;
assign sfBar[4] = mixedNet99983;
assign stBar[12] = mixedNet99982;
assign sfBar[24] = mixedNet99981;
assign sfBar[6] = mixedNet99977;
assign sfBar[29] = mixedNet99974;
assign stBar[10] = mixedNet99971;
assign sfBar[5] = mixedNet99969;
assign sfBar[21] = mixedNet99964;
assign stBar[14] = mixedNet99963;
assign stBar[13] = mixedNet99962;
assign dfBar = mixedNet99959;
assign ReqBar = mixedNet99957;
assign stBar[28] = mixedNet99956;
assign stBar[29] = mixedNet99955;
assign sfBar[27] = mixedNet99954;
assign stBar[11] = mixedNet99951;
assign stBar[1] = mixedNet99947;
assign sfBar[17] = mixedNet99945;
assign sfBar[28] = mixedNet99942;
assign stBar[0] = mixedNet99941;
assign sfBar[31] = mixedNet99939;
assign sfBar[20] = mixedNet99933;
assign sfBar[19] = mixedNet99932;
assign sfBar[8] = mixedNet99910;
assign sfBar[30] = mixedNet99906;
assign stBar[24] = mixedNet99904;
assign sfBar[16] = mixedNet99895;
assign sfBar[22] = mixedNet99892;
assign dtBar = mixedNet99887;
assign stBar[23] = mixedNet99886;
assign sfBar[1] = mixedNet99885;
assign stBar[31] = mixedNet99882;
assign stBar[30] = mixedNet99881;
assign sfBar[15] = mixedNet99880;
assign sfBar[14] = mixedNet99879;
assign sfBar[18] = mixedNet99877;
assign sfBar[0] = mixedNet99876;
assign stBar[22] = mixedNet99875;
assign sfBar[3] = mixedNet99869;
assign stBar[18] = mixedNet99866;
assign stBar[17] = mixedNet99864;
assign stBar[16] = mixedNet99856;
assign sfBar[2] = mixedNet99855;
assign sfBar[11] = mixedNet99851;
assign stBar[6] = mixedNet99846;
assign sfBar[13] = mixedNet99845;
assign sfBar[10] = mixedNet99842;
assign stBar[5] = mixedNet99839;
assign stBar[4] = mixedNet99838;
assign stBar[3] = mixedNet99837;
assign sfBar[26] = mixedNet99834;
assign stBar[27] = mixedNet99833;
assign stBar[2] = mixedNet99829;
assign sfBar[25] = mixedNet99825;
assign sfBar[9] = mixedNet99819;
assign stBar[21] = mixedNet99816;
assign stBar[20] = mixedNet99815;
assign stBar[19] = mixedNet99814;
assign sfBar[12] = mixedNet99813;
assign stBar[9] = mixedNet99810;
assign stBar[8] = mixedNet99807;

// end interface element definitions



specify 
    specparam CDS_LIBNAME  = "16nm_Tests";
    specparam CDS_CELLNAME = "Martin32_Test";
    specparam CDS_VIEWNAME = "schematic";
endspecify

inv_1xT I18 ( Req, ReqBar);
inv_1xT I16 ( df, dfBar);
inv_1xT I15 ( dt, dtBar);
inv_1xT I12 ( cfBar, cf);
inv_1xT I11 ( ctBar, ct);
inv_1xT I70_31_ ( sf[31], sfBar[31]);
inv_1xT I70_30_ ( sf[30], sfBar[30]);
inv_1xT I70_29_ ( sf[29], sfBar[29]);
inv_1xT I70_28_ ( sf[28], sfBar[28]);
inv_1xT I70_27_ ( sf[27], sfBar[27]);
inv_1xT I70_26_ ( sf[26], sfBar[26]);
inv_1xT I70_25_ ( sf[25], sfBar[25]);
inv_1xT I70_24_ ( sf[24], sfBar[24]);
inv_1xT I70_23_ ( sf[23], sfBar[23]);
inv_1xT I70_22_ ( sf[22], sfBar[22]);
inv_1xT I70_21_ ( sf[21], sfBar[21]);
inv_1xT I70_20_ ( sf[20], sfBar[20]);
inv_1xT I70_19_ ( sf[19], sfBar[19]);
inv_1xT I70_18_ ( sf[18], sfBar[18]);
inv_1xT I70_17_ ( sf[17], sfBar[17]);
inv_1xT I70_16_ ( sf[16], sfBar[16]);
inv_1xT I70_15_ ( sf[15], sfBar[15]);
inv_1xT I70_14_ ( sf[14], sfBar[14]);
inv_1xT I70_13_ ( sf[13], sfBar[13]);
inv_1xT I70_12_ ( sf[12], sfBar[12]);
inv_1xT I70_11_ ( sf[11], sfBar[11]);
inv_1xT I70_10_ ( sf[10], sfBar[10]);
inv_1xT I70_9_ ( sf[9], sfBar[9]);
inv_1xT I70_8_ ( sf[8], sfBar[8]);
inv_1xT I70_7_ ( sf[7], sfBar[7]);
inv_1xT I70_6_ ( sf[6], sfBar[6]);
inv_1xT I70_5_ ( sf[5], sfBar[5]);
inv_1xT I70_4_ ( sf[4], sfBar[4]);
inv_1xT I70_3_ ( sf[3], sfBar[3]);
inv_1xT I70_2_ ( sf[2], sfBar[2]);
inv_1xT I70_1_ ( sf[1], sfBar[1]);
inv_1xT I70_0_ ( sf[0], sfBar[0]);
inv_1xT I69_31_ ( st[31], stBar[31]);
inv_1xT I69_30_ ( st[30], stBar[30]);
inv_1xT I69_29_ ( st[29], stBar[29]);
inv_1xT I69_28_ ( st[28], stBar[28]);
inv_1xT I69_27_ ( st[27], stBar[27]);
inv_1xT I69_26_ ( st[26], stBar[26]);
inv_1xT I69_25_ ( st[25], stBar[25]);
inv_1xT I69_24_ ( st[24], stBar[24]);
inv_1xT I69_23_ ( st[23], stBar[23]);
inv_1xT I69_22_ ( st[22], stBar[22]);
inv_1xT I69_21_ ( st[21], stBar[21]);
inv_1xT I69_20_ ( st[20], stBar[20]);
inv_1xT I69_19_ ( st[19], stBar[19]);
inv_1xT I69_18_ ( st[18], stBar[18]);
inv_1xT I69_17_ ( st[17], stBar[17]);
inv_1xT I69_16_ ( st[16], stBar[16]);
inv_1xT I69_15_ ( st[15], stBar[15]);
inv_1xT I69_14_ ( st[14], stBar[14]);
inv_1xT I69_13_ ( st[13], stBar[13]);
inv_1xT I69_12_ ( st[12], stBar[12]);
inv_1xT I69_11_ ( st[11], stBar[11]);
inv_1xT I69_10_ ( st[10], stBar[10]);
inv_1xT I69_9_ ( st[9], stBar[9]);
inv_1xT I69_8_ ( st[8], stBar[8]);
inv_1xT I69_7_ ( st[7], stBar[7]);
inv_1xT I69_6_ ( st[6], stBar[6]);
inv_1xT I69_5_ ( st[5], stBar[5]);
inv_1xT I69_4_ ( st[4], stBar[4]);
inv_1xT I69_3_ ( st[3], stBar[3]);
inv_1xT I69_2_ ( st[2], stBar[2]);
inv_1xT I69_1_ ( st[1], stBar[1]);
inv_1xT I69_0_ ( st[0], stBar[0]);
inv_1xT I1_31_ ( afBar[31], af[31]);
inv_1xT I1_30_ ( afBar[30], af[30]);
inv_1xT I1_29_ ( afBar[29], af[29]);
inv_1xT I1_28_ ( afBar[28], af[28]);
inv_1xT I1_27_ ( afBar[27], af[27]);
inv_1xT I1_26_ ( afBar[26], af[26]);
inv_1xT I1_25_ ( afBar[25], af[25]);
inv_1xT I1_24_ ( afBar[24], af[24]);
inv_1xT I1_23_ ( afBar[23], af[23]);
inv_1xT I1_22_ ( afBar[22], af[22]);
inv_1xT I1_21_ ( afBar[21], af[21]);
inv_1xT I1_20_ ( afBar[20], af[20]);
inv_1xT I1_19_ ( afBar[19], af[19]);
inv_1xT I1_18_ ( afBar[18], af[18]);
inv_1xT I1_17_ ( afBar[17], af[17]);
inv_1xT I1_16_ ( afBar[16], af[16]);
inv_1xT I1_15_ ( afBar[15], af[15]);
inv_1xT I1_14_ ( afBar[14], af[14]);
inv_1xT I1_13_ ( afBar[13], af[13]);
inv_1xT I1_12_ ( afBar[12], af[12]);
inv_1xT I1_11_ ( afBar[11], af[11]);
inv_1xT I1_10_ ( afBar[10], af[10]);
inv_1xT I1_9_ ( afBar[9], af[9]);
inv_1xT I1_8_ ( afBar[8], af[8]);
inv_1xT I1_7_ ( afBar[7], af[7]);
inv_1xT I1_6_ ( afBar[6], af[6]);
inv_1xT I1_5_ ( afBar[5], af[5]);
inv_1xT I1_4_ ( afBar[4], af[4]);
inv_1xT I1_3_ ( afBar[3], af[3]);
inv_1xT I1_2_ ( afBar[2], af[2]);
inv_1xT I1_1_ ( afBar[1], af[1]);
inv_1xT I1_0_ ( afBar[0], af[0]);
inv_1xT I3_31_ ( bfBar[31], bf[31]);
inv_1xT I3_30_ ( bfBar[30], bf[30]);
inv_1xT I3_29_ ( bfBar[29], bf[29]);
inv_1xT I3_28_ ( bfBar[28], bf[28]);
inv_1xT I3_27_ ( bfBar[27], bf[27]);
inv_1xT I3_26_ ( bfBar[26], bf[26]);
inv_1xT I3_25_ ( bfBar[25], bf[25]);
inv_1xT I3_24_ ( bfBar[24], bf[24]);
inv_1xT I3_23_ ( bfBar[23], bf[23]);
inv_1xT I3_22_ ( bfBar[22], bf[22]);
inv_1xT I3_21_ ( bfBar[21], bf[21]);
inv_1xT I3_20_ ( bfBar[20], bf[20]);
inv_1xT I3_19_ ( bfBar[19], bf[19]);
inv_1xT I3_18_ ( bfBar[18], bf[18]);
inv_1xT I3_17_ ( bfBar[17], bf[17]);
inv_1xT I3_16_ ( bfBar[16], bf[16]);
inv_1xT I3_15_ ( bfBar[15], bf[15]);
inv_1xT I3_14_ ( bfBar[14], bf[14]);
inv_1xT I3_13_ ( bfBar[13], bf[13]);
inv_1xT I3_12_ ( bfBar[12], bf[12]);
inv_1xT I3_11_ ( bfBar[11], bf[11]);
inv_1xT I3_10_ ( bfBar[10], bf[10]);
inv_1xT I3_9_ ( bfBar[9], bf[9]);
inv_1xT I3_8_ ( bfBar[8], bf[8]);
inv_1xT I3_7_ ( bfBar[7], bf[7]);
inv_1xT I3_6_ ( bfBar[6], bf[6]);
inv_1xT I3_5_ ( bfBar[5], bf[5]);
inv_1xT I3_4_ ( bfBar[4], bf[4]);
inv_1xT I3_3_ ( bfBar[3], bf[3]);
inv_1xT I3_2_ ( bfBar[2], bf[2]);
inv_1xT I3_1_ ( bfBar[1], bf[1]);
inv_1xT I3_0_ ( bfBar[0], bf[0]);
inv_1xT I4_31_ ( btBar[31], bt[31]);
inv_1xT I4_30_ ( btBar[30], bt[30]);
inv_1xT I4_29_ ( btBar[29], bt[29]);
inv_1xT I4_28_ ( btBar[28], bt[28]);
inv_1xT I4_27_ ( btBar[27], bt[27]);
inv_1xT I4_26_ ( btBar[26], bt[26]);
inv_1xT I4_25_ ( btBar[25], bt[25]);
inv_1xT I4_24_ ( btBar[24], bt[24]);
inv_1xT I4_23_ ( btBar[23], bt[23]);
inv_1xT I4_22_ ( btBar[22], bt[22]);
inv_1xT I4_21_ ( btBar[21], bt[21]);
inv_1xT I4_20_ ( btBar[20], bt[20]);
inv_1xT I4_19_ ( btBar[19], bt[19]);
inv_1xT I4_18_ ( btBar[18], bt[18]);
inv_1xT I4_17_ ( btBar[17], bt[17]);
inv_1xT I4_16_ ( btBar[16], bt[16]);
inv_1xT I4_15_ ( btBar[15], bt[15]);
inv_1xT I4_14_ ( btBar[14], bt[14]);
inv_1xT I4_13_ ( btBar[13], bt[13]);
inv_1xT I4_12_ ( btBar[12], bt[12]);
inv_1xT I4_11_ ( btBar[11], bt[11]);
inv_1xT I4_10_ ( btBar[10], bt[10]);
inv_1xT I4_9_ ( btBar[9], bt[9]);
inv_1xT I4_8_ ( btBar[8], bt[8]);
inv_1xT I4_7_ ( btBar[7], bt[7]);
inv_1xT I4_6_ ( btBar[6], bt[6]);
inv_1xT I4_5_ ( btBar[5], bt[5]);
inv_1xT I4_4_ ( btBar[4], bt[4]);
inv_1xT I4_3_ ( btBar[3], bt[3]);
inv_1xT I4_2_ ( btBar[2], bt[2]);
inv_1xT I4_1_ ( btBar[1], bt[1]);
inv_1xT I4_0_ ( btBar[0], bt[0]);
inv_1xT I2_31_ ( atBar[31], at[31]);
inv_1xT I2_30_ ( atBar[30], at[30]);
inv_1xT I2_29_ ( atBar[29], at[29]);
inv_1xT I2_28_ ( atBar[28], at[28]);
inv_1xT I2_27_ ( atBar[27], at[27]);
inv_1xT I2_26_ ( atBar[26], at[26]);
inv_1xT I2_25_ ( atBar[25], at[25]);
inv_1xT I2_24_ ( atBar[24], at[24]);
inv_1xT I2_23_ ( atBar[23], at[23]);
inv_1xT I2_22_ ( atBar[22], at[22]);
inv_1xT I2_21_ ( atBar[21], at[21]);
inv_1xT I2_20_ ( atBar[20], at[20]);
inv_1xT I2_19_ ( atBar[19], at[19]);
inv_1xT I2_18_ ( atBar[18], at[18]);
inv_1xT I2_17_ ( atBar[17], at[17]);
inv_1xT I2_16_ ( atBar[16], at[16]);
inv_1xT I2_15_ ( atBar[15], at[15]);
inv_1xT I2_14_ ( atBar[14], at[14]);
inv_1xT I2_13_ ( atBar[13], at[13]);
inv_1xT I2_12_ ( atBar[12], at[12]);
inv_1xT I2_11_ ( atBar[11], at[11]);
inv_1xT I2_10_ ( atBar[10], at[10]);
inv_1xT I2_9_ ( atBar[9], at[9]);
inv_1xT I2_8_ ( atBar[8], at[8]);
inv_1xT I2_7_ ( atBar[7], at[7]);
inv_1xT I2_6_ ( atBar[6], at[6]);
inv_1xT I2_5_ ( atBar[5], at[5]);
inv_1xT I2_4_ ( atBar[4], at[4]);
inv_1xT I2_3_ ( atBar[3], at[3]);
inv_1xT I2_2_ ( atBar[2], at[2]);
inv_1xT I2_1_ ( atBar[1], at[1]);
inv_1xT I2_0_ ( atBar[0], at[0]);

endmodule
